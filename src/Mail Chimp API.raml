#%RAML 0.8
title: Mail Chimp API
version: 2.0
baseUri: https://dc.api.mailchimp.com/2.0
securedBy: [oauth_2_0]
securitySchemes:
- oauth_2_0:
    description: |
            Dropbox supports OAuth 2.0 for authenticating all API requests.
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
            Used to send a valid OAuth 2 access token. Do not use
            with the "access_token" query string parameter.
          type: string
      queryParameters:
        access_token:
          description: |
            Used to send a valid OAuth 2 access token. Do not use together with
            the "Authorization" header
          type: string
      responses:
        401:
          description: |
            Bad or expired token. This can happen if the user or Dropbox
            revoked or expired an access token. To fix, you should re-
            authenticate the user.
        403:
          description: |
            Bad OAuth request (wrong consumer key, bad nonce, expired
            imestamp...). Unfortunately, re-authenticating the user won't help here.
    settings:
      authorizationUri: https://login.mailchimp.com/oauth2/authorize
      accessTokenUri: hhttps://login.mailchimp.com/oauth2/token
/campaigns:
  /content.json:
    post:
      description: <<Get the content (both html and text) for a campaign either as it would appear in the campaign archive or as the raw, original content.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string",
                  "required" : "true"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string",
                  "required" : "true"
                },
                "options": {
                  "id": "http://jsonschema.net/options",
                  "type": "object",
                  "required" : "false",
                  "properties": {
                    "view": {
                      "id": "http://jsonschema.net/options/view",
                      "type": "string"
                    },
                    "email": {
                      "id": "http://jsonschema.net/options/email",
                      "type": "object",
                      "properties": {
                        "email": {
                          "id": "http://jsonschema.net/options/email/email",
                          "type": "string"
                        },
                        "euid": {
                          "id": "http://jsonschema.net/options/email/euid",
                          "type": "string"
                        },
                        "leid": {
                          "id": "http://jsonschema.net/options/email/leid",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "options": {
                  "view": "example view",
                  "email": {
                      "email": "example email",
                      "euid": "example euid",
                      "leid": "example leid"
                  }
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "html": "example html",
                  "text": "example text"
                }
  /create.json:
    post:
      description: <<Create a new draft campaign to send. You can not have more than 32,000 campaigns in your account.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string",
                  "required" : "true"
                },
                "type": {
                  "id": "http://jsonschema.net/type",
                  "type": "string",
                  "required" : "true"
                },
                "options": {
                  "id": "http://jsonschema.net/options",
                  "type": "object",
                  "required" : "true",
                  "properties": {
                    "list_id": {
                      "id": "http://jsonschema.net/options/list_id",
                      "type": "string",
                      "required" : "true"
                    },
                    "subject": {
                      "id": "http://jsonschema.net/options/subject",
                      "type": "string",
                      "required" : "true"
                    },
                    "from_email": {
                      "id": "http://jsonschema.net/options/from_email",
                      "type": "string",
                      "required" : "true"
                    },
                    "from_name": {
                      "id": "http://jsonschema.net/options/from_name",
                      "type": "string",
                      "required" : "true"
                    },
                    "to_name": {
                      "id": "http://jsonschema.net/options/to_name",
                      "type": "string",
                      "required" : "true"
                    },
                    "template_id": {
                      "id": "http://jsonschema.net/options/template_id",
                      "type": "integer"
                    },
                    "gallery_template_id": {
                      "id": "http://jsonschema.net/options/gallery_template_id",
                      "type": "integer"
                    },
                    "base_template_id": {
                      "id": "http://jsonschema.net/options/base_template_id",
                      "type": "integer"
                    },
                    "folder_id": {
                      "id": "http://jsonschema.net/options/folder_id",
                      "type": "integer"
                    },
                    "tracking": {
                      "id": "http://jsonschema.net/options/tracking",
                      "type": "object",
                      "properties": {
                        "opens": {
                          "id": "http://jsonschema.net/options/tracking/opens",
                          "type": "boolean"
                        },
                        "html_clicks": {
                          "id": "http://jsonschema.net/options/tracking/html_clicks",
                          "type": "boolean"
                        },
                        "text_clicks": {
                          "id": "http://jsonschema.net/options/tracking/text_clicks",
                          "type": "boolean"
                        }
                      }
                    },
                    "title": {
                      "id": "http://jsonschema.net/options/title",
                      "type": "string"
                    },
                    "authenticate": {
                      "id": "http://jsonschema.net/options/authenticate",
                      "type": "boolean"
                    },
                    "analytics": {
                      "id": "http://jsonschema.net/options/analytics",
                      "type": "object",
                      "properties": {
                        "google": {
                          "id": "http://jsonschema.net/options/analytics/google",
                          "type": "string"
                        },
                        "clicktale": {
                          "id": "http://jsonschema.net/options/analytics/clicktale",
                          "type": "string"
                        },
                        "gooal": {
                          "id": "http://jsonschema.net/options/analytics/gooal",
                          "type": "string"
                        }
                      }
                    },
                    "auto_footer": {
                      "id": "http://jsonschema.net/options/auto_footer",
                      "type": "boolean"
                    },
                    "inline_css": {
                      "id": "http://jsonschema.net/options/inline_css",
                      "type": "boolean"
                    },
                    "generate_text": {
                      "id": "http://jsonschema.net/options/generate_text",
                      "type": "boolean"
                    },
                    "auto_tweet": {
                      "id": "http://jsonschema.net/options/auto_tweet",
                      "type": "boolean"
                    },
                    "auto_fb_post": {
                      "id": "http://jsonschema.net/options/auto_fb_post",
                      "type": "array",
                      "items": {
                        "id": "http://jsonschema.net/options/auto_fb_post/0",
                        "type": "string"
                      }
                    },
                    "fb_comments": {
                      "id": "http://jsonschema.net/options/fb_comments",
                      "type": "boolean"
                    },
                    "timewarp": {
                      "id": "http://jsonschema.net/options/timewarp",
                      "type": "boolean"
                    },
                    "ecomm360": {
                      "id": "http://jsonschema.net/options/ecomm360",
                      "type": "boolean"
                    },
                    "crm_tracking": {
                      "id": "http://jsonschema.net/options/crm_tracking",
                      "type": "object",
                      "properties": {
                        "salesforce": {
                          "id": "http://jsonschema.net/options/crm_tracking/salesforce",
                          "type": "object",
                          "properties": {
                            "campaign": {
                              "id": "http://jsonschema.net/options/crm_tracking/salesforce/campaign",
                              "type": "boolean"
                            },
                            "notes": {
                              "id": "http://jsonschema.net/options/crm_tracking/salesforce/notes",
                              "type": "boolean"
                            }
                          }
                        },
                        "highrise": {
                          "id": "http://jsonschema.net/options/crm_tracking/highrise",
                          "type": "object",
                          "properties": {
                            "campaign": {
                              "id": "http://jsonschema.net/options/crm_tracking/highrise/campaign",
                              "type": "boolean"
                            },
                            "notes": {
                              "id": "http://jsonschema.net/options/crm_tracking/highrise/notes",
                              "type": "boolean"
                            }
                          }
                        },
                        "capsule": {
                          "id": "http://jsonschema.net/options/crm_tracking/capsule",
                          "type": "object",
                          "properties": {
                            "notes": {
                              "id": "http://jsonschema.net/options/crm_tracking/capsule/notes",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "content": {
                  "id": "http://jsonschema.net/content",
                  "type": "object",
                  "required" : "true",
                  "properties": {
                    "html": {
                      "id": "http://jsonschema.net/content/html",
                      "type": "string",
                      "required" : "true"
                    },
                    "sections": {
                      "id": "http://jsonschema.net/content/sections",
                      "type": "object",
                      "required" : "true",
                      "properties": {
                        "...": {
                          "id": "http://jsonschema.net/content/sections/...",
                          "type": "string"
                        }
                      }
                    },
                    "text": {
                      "id": "http://jsonschema.net/content/text",
                      "type": "string",
                      "required" : "true"
                    },
                    "url": {
                      "id": "http://jsonschema.net/content/url",
                      "type": "string",
                      "required" : "true"
                    },
                    "archive": {
                      "id": "http://jsonschema.net/content/archive",
                      "type": "string",
                      "required" : "true"
                    },
                    "archive_type": {
                      "id": "http://jsonschema.net/content/archive_type",
                      "type": "string"
                    }
                  }
                },
                "segment_opts": {
                  "id": "http://jsonschema.net/segment_opts",
                  "type": "object",
                  "properties": {
                    "...": {
                      "id": "http://jsonschema.net/segment_opts/...",
                      "type": "string"
                    }
                  }
                },
                "type_opts": {
                  "id": "http://jsonschema.net/type_opts",
                  "type": "object",
                  "properties": {
                    "rss": {
                      "id": "http://jsonschema.net/type_opts/rss",
                      "type": "object",
                      "properties": {
                        "url": {
                          "id": "http://jsonschema.net/type_opts/rss/url",
                          "type": "string"
                        },
                        "schedule": {
                          "id": "http://jsonschema.net/type_opts/rss/schedule",
                          "type": "string"
                        },
                        "schedule_hour": {
                          "id": "http://jsonschema.net/type_opts/rss/schedule_hour",
                          "type": "string"
                        },
                        "schedule_weekday": {
                          "id": "http://jsonschema.net/type_opts/rss/schedule_weekday",
                          "type": "string"
                        },
                        "schedule_monthday": {
                          "id": "http://jsonschema.net/type_opts/rss/schedule_monthday",
                          "type": "string"
                        },
                        "days": {
                          "id": "http://jsonschema.net/type_opts/rss/days",
                          "type": "object",
                          "properties": {
                            "1": {
                              "id": "http://jsonschema.net/type_opts/rss/days/1",
                              "type": "boolean"
                            },
                            "2": {
                              "id": "http://jsonschema.net/type_opts/rss/days/2",
                              "type": "boolean"
                            },
                            "3": {
                              "id": "http://jsonschema.net/type_opts/rss/days/3",
                              "type": "boolean"
                            },
                            "4": {
                              "id": "http://jsonschema.net/type_opts/rss/days/4",
                              "type": "boolean"
                            },
                            "5": {
                              "id": "http://jsonschema.net/type_opts/rss/days/5",
                              "type": "boolean"
                            },
                            "6": {
                              "id": "http://jsonschema.net/type_opts/rss/days/6",
                              "type": "boolean"
                            },
                            "7": {
                              "id": "http://jsonschema.net/type_opts/rss/days/7",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "absplit": {
                      "id": "http://jsonschema.net/type_opts/absplit",
                      "type": "object",
                      "properties": {
                        "split_test": {
                          "id": "http://jsonschema.net/type_opts/absplit/split_test",
                          "type": "string"
                        },
                        "pick_winner": {
                          "id": "http://jsonschema.net/type_opts/absplit/pick_winner",
                          "type": "string"
                        },
                        "wait_units": {
                          "id": "http://jsonschema.net/type_opts/absplit/wait_units",
                          "type": "integer"
                        },
                        "wait_time": {
                          "id": "http://jsonschema.net/type_opts/absplit/wait_time",
                          "type": "integer"
                        },
                        "split_size": {
                          "id": "http://jsonschema.net/type_opts/absplit/split_size",
                          "type": "integer"
                        },
                        "from_name_a": {
                          "id": "http://jsonschema.net/type_opts/absplit/from_name_a",
                          "type": "string"
                        },
                        "from_name_b": {
                          "id": "http://jsonschema.net/type_opts/absplit/from_name_b",
                          "type": "string"
                        },
                        "from_email_a": {
                          "id": "http://jsonschema.net/type_opts/absplit/from_email_a",
                          "type": "string"
                        },
                        "from_email_b": {
                          "id": "http://jsonschema.net/type_opts/absplit/from_email_b",
                          "type": "string"
                        },
                        "subject_a": {
                          "id": "http://jsonschema.net/type_opts/absplit/subject_a",
                          "type": "string"
                        },
                        "subject_b": {
                          "id": "http://jsonschema.net/type_opts/absplit/subject_b",
                          "type": "string"
                        }
                      }
                    },
                    "auto": {
                      "id": "http://jsonschema.net/type_opts/auto",
                      "type": "object",
                      "properties": {
                        "offset-units": {
                          "id": "http://jsonschema.net/type_opts/auto/offset-units",
                          "type": "string"
                        },
                        "offset-time": {
                          "id": "http://jsonschema.net/type_opts/auto/offset-time",
                          "type": "string"
                        },
                        "offset-dir": {
                          "id": "http://jsonschema.net/type_opts/auto/offset-dir",
                          "type": "string"
                        },
                        "event": {
                          "id": "http://jsonschema.net/type_opts/auto/event",
                          "type": "string"
                        },
                        "event-datemerge": {
                          "id": "http://jsonschema.net/type_opts/auto/event-datemerge",
                          "type": "string"
                        },
                        "campaign_id": {
                          "id": "http://jsonschema.net/type_opts/auto/campaign_id",
                          "type": "string"
                        },
                        "campaign_url": {
                          "id": "http://jsonschema.net/type_opts/auto/campaign_url",
                          "type": "string"
                        },
                        "schedule_hour": {
                          "id": "http://jsonschema.net/type_opts/auto/schedule_hour",
                          "type": "integer"
                        },
                        "use_import_time": {
                          "id": "http://jsonschema.net/type_opts/auto/use_import_time",
                          "type": "boolean"
                        },
                        "days": {
                          "id": "http://jsonschema.net/type_opts/auto/days",
                          "type": "object",
                          "properties": {
                            "1": {
                              "id": "http://jsonschema.net/type_opts/auto/days/1",
                              "type": "boolean"
                            },
                            "2": {
                              "id": "http://jsonschema.net/type_opts/auto/days/2",
                              "type": "boolean"
                            },
                            "3": {
                              "id": "http://jsonschema.net/type_opts/auto/days/3",
                              "type": "boolean"
                            },
                            "4": {
                              "id": "http://jsonschema.net/type_opts/auto/days/4",
                              "type": "boolean"
                            },
                            "5": {
                              "id": "http://jsonschema.net/type_opts/auto/days/5",
                              "type": "boolean"
                            },
                            "6": {
                              "id": "http://jsonschema.net/type_opts/auto/days/6",
                              "type": "boolean"
                            },
                            "7": {
                              "id": "http://jsonschema.net/type_opts/auto/days/7",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          example: |
            {
              "apikey": "example apikey",
              "type": "example type",
              "options": {
                "list_id": "example list_id",
                "subject": "example subject",
                "from_email": "example from_email",
                "from_name": "example from_name",
                "to_name": "example to_name",
                "template_id": 42,
                "gallery_template_id": 42,
                "base_template_id": 42,
                "folder_id": 42,
                "tracking": {
                  "opens": true,
                  "html_clicks": true,
                  "text_clicks": true
                },
                "title": "example title",
                "authenticate": true,
                "analytics": {
                  "google": "example google",
                  "clicktale": "example clicktale",
                  "gooal": "example gooal"
                },
                "auto_footer": true,
                "inline_css": true,
                "generate_text": true,
                "auto_tweet": true,
                "auto_fb_post": [
                  "..."
                ],
                "fb_comments": true,
                "timewarp": true,
                "ecomm360": true,
                "crm_tracking": {
                  "salesforce": {
                    "campaign": true,
                    "notes": true
                  },
                  "highrise": {
                    "campaign": true,
                    "notes": true
                  },
                  "capsule": {
                    "notes": true
                  }
                }
              },
              "content": {
                "html": "example html",
                "sections": {
                  "...": "..."
                },
                "text": "example text",
                "url": "example url",
                "archive": "example archive",
                "archive_type": "example archive_type"
              },
              "segment_opts": {
                "...": "..."
              },
              "type_opts": {
                "rss": {
                  "url": "example url",
                  "schedule": "example schedule",
                  "schedule_hour": "example schedule_hour",
                  "schedule_weekday": "example schedule_weekday",
                  "schedule_monthday": "example schedule_monthday",
                  "days": {
                    "1": true,
                    "2": true,
                    "3": true,
                    "4": true,
                    "5": true,
                    "6": true,
                    "7": true
                  }
                },
                "absplit": {
                  "split_test": "example split_test",
                  "pick_winner": "example pick_winner",
                  "wait_units": 42,
                  "wait_time": 42,
                  "split_size": 42,
                  "from_name_a": "example from_name_a",
                  "from_name_b": "example from_name_b",
                  "from_email_a": "example from_email_a",
                  "from_email_b": "example from_email_b",
                  "subject_a": "example subject_a",
                  "subject_b": "example subject_b"
                },
                "auto": {
                  "offset-units": "example offset-units",
                  "offset-time": "example offset-time",
                  "offset-dir": "example offset-dir",
                  "event": "example event",
                  "event-datemerge": "example event-datemerge",
                  "campaign_id": "example campaign_id",
                  "campaign_url": "example campaign_url",
                  "schedule_hour": 42,
                  "use_import_time": true,
                  "days": {
                    "1": true,
                    "2": true,
                    "3": true,
                    "4": true,
                    "5": true,
                    "6": true,
                    "7": true
                  }
                }
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                    "...": "..."
                }
  /delete.json:
    post:
      description: <<Delete a campaign. Seriously, "poof, gone!" - be careful! Seriously, no one can undelete these.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
                "apikey": "example apikey",
                "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                    "complete": true
                }
  /list.json:
    post:
      description: <<Get the list of campaigns and their details matching the specified filters>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "filters": {
                  "id": "http://jsonschema.net/filters",
                  "type": "object",
                  "properties": {
                    "campaign_id": {
                      "id": "http://jsonschema.net/filters/campaign_id",
                      "type": "string"
                    },
                    "parent_id": {
                      "id": "http://jsonschema.net/filters/parent_id",
                      "type": "string"
                    },
                    "list_id": {
                      "id": "http://jsonschema.net/filters/list_id",
                      "type": "string"
                    },
                    "folder_id": {
                      "id": "http://jsonschema.net/filters/folder_id",
                      "type": "integer"
                    },
                    "template_id": {
                      "id": "http://jsonschema.net/filters/template_id",
                      "type": "integer"
                    },
                    "status": {
                      "id": "http://jsonschema.net/filters/status",
                      "type": "string"
                    },
                    "type": {
                      "id": "http://jsonschema.net/filters/type",
                      "type": "string"
                    },
                    "from_name": {
                      "id": "http://jsonschema.net/filters/from_name",
                      "type": "string"
                    },
                    "from_email": {
                      "id": "http://jsonschema.net/filters/from_email",
                      "type": "string"
                    },
                    "title": {
                      "id": "http://jsonschema.net/filters/title",
                      "type": "string"
                    },
                    "subject": {
                      "id": "http://jsonschema.net/filters/subject",
                      "type": "string"
                    },
                    "sendtime_start": {
                      "id": "http://jsonschema.net/filters/sendtime_start",
                      "type": "string"
                    },
                    "sendtime_end": {
                      "id": "http://jsonschema.net/filters/sendtime_end",
                      "type": "string"
                    },
                    "uses_segment": {
                      "id": "http://jsonschema.net/filters/uses_segment",
                      "type": "boolean"
                    },
                    "exact": {
                      "id": "http://jsonschema.net/filters/exact",
                      "type": "boolean"
                    }
                  }
                },
                "start": {
                  "id": "http://jsonschema.net/start",
                  "type": "integer"
                },
                "limit": {
                  "id": "http://jsonschema.net/limit",
                  "type": "integer"
                },
                "sort_field": {
                  "id": "http://jsonschema.net/sort_field",
                  "type": "string"
                },
                "sort_dir": {
                  "id": "http://jsonschema.net/sort_dir",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "filters",
                "start",
                "limit",
                "sort_field",
                "sort_dir"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "filters": {
                "campaign_id": "example campaign_id",
                "parent_id": "example parent_id",
                "list_id": "example list_id",
                "folder_id": 42,
                "template_id": 42,
                "status": "example status",
                "type": "example type",
                "from_name": "example from_name",
                "from_email": "example from_email",
                "title": "example title",
                "subject": "example subject",
                "sendtime_start": "example sendtime_start",
                "sendtime_end": "example sendtime_end",
                "uses_segment": true,
                "exact": true
              },
              "start": 42,
              "limit": 42,
              "sort_field": "example sort_field",
              "sort_dir": "example sort_dir"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "id": "example id",
                          "web_id": 42,
                          "list_id": "example list_id",
                          "folder_id": 42,
                          "template_id": 42,
                          "content_type": "example content_type",
                          "title": "example title",
                          "type": "example type",
                          "create_time": "example create_time",
                          "send_time": "example send_time",
                          "emails_sent": 42,
                          "status": "example status",
                          "from_name": "example from_name",
                          "from_email": "example from_email",
                          "subject": "example subject",
                          "to_name": "example to_name",
                          "archive_url": "example archive_url",
                          "inline_css": true,
                          "analytics": "example analytics",
                          "analytics_tag": "example analytics_tag",
                          "authenticate": true,
                          "ecomm360": true,
                          "auto_tweet": true,
                          "auto_fb_post": "example auto_fb_post",
                          "auto_footer": true,
                          "timewarp": true,
                          "timewarp_schedule": "example timewarp_schedule",
                          "parent_id": "example parent_id",
                          "is_child": true,
                          "tests_sent": "example tests_sent",
                          "tests_remain": 42,
                          "tracking": {
                              "html_clicks": true,
                              "text_clicks": true,
                              "opens": true
                          },
                          "segment_text": "example segment_text",
                          "segment_opts": [
                              "..."
                          ],
                          "saved_segment": {
                              "id": 42,
                              "type": "example type",
                              "name": "example name"
                          },
                          "type_opts": {
                              "...": "..."
                          },
                          "comments_total": 42,
                          "comments_unread": 42,
                          "summary": {
                              "...": "..."
                          },
                          "social_card": {
                              "title": "example title",
                              "description": "example description",
                              "image_url": "example image_url",
                              "enabled": "example enabled"
                          }
                      }
                  ],
                  "errors": [
                      {
                          "filter": "example filter",
                          "value": "example value",
                          "code": 42,
                          "error": "example error"
                      }
                  ]
                }
  /pause.json:
    post:
      description: <<Pause an AutoResponder or RSS campaign from sending>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
                "apikey": "example apikey",
                "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                    "complete": true
                }
  /ready.json:
    post:
      description: <<Returns information on whether a campaign is ready to send and possible issues we may have detected with it - very similar to the confirmation step in the app.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
                "apikey": "example apikey",
                "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "is_ready": true,
                  "items": [
                      {
                          "type": "example type",
                          "heading": "example heading",
                          "details": "example details"
                      }
                  ]
                }
  /replicate.json:
    post:
      description: <<Replicate a campaign.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
                "apikey": "example apikey",
                "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "...": "..."
                }
  /resume.json:
    post:
      description: <<Resume sending an AutoResponder or RSS campaign>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
                "apikey": "example apikey",
                "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /schedule-batch.json:
    post:
      description: <<Schedule a campaign to be sent in batches sometime in the future. Only valid for "regular" campaigns>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "schedule_time": {
                  "id": "http://jsonschema.net/schedule_time",
                  "type": "string"
                },
                "num_batches": {
                  "id": "http://jsonschema.net/num_batches",
                  "type": "integer"
                },
                "stagger_mins": {
                  "id": "http://jsonschema.net/stagger_mins",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "cid",
                "schedule_time",
                "num_batches",
                "stagger_mins"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "schedule_time": "example schedule_time",
              "num_batches": 42,
              "stagger_mins": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /schedule.json:
    post:
      description: <<Schedule a campaign to be sent in the future>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "schedule_time": {
                  "id": "http://jsonschema.net/schedule_time",
                  "type": "string"
                },
                "schedule_time_b": {
                  "id": "http://jsonschema.net/schedule_time_b",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid",
                "schedule_time",
                "schedule_time_b"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "schedule_time": "example schedule_time",
              "schedule_time_b": "example schedule_time_b"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /segment-test.json:
    post:
      description: <<Allows one to test their segmentation rules before creating a campaign using them.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "list_id": {
                  "id": "http://jsonschema.net/list_id",
                  "type": "string"
                },
                "options": {
                  "id": "http://jsonschema.net/options",
                  "type": "object",
                  "properties": {
                    "saved_segment_id": {
                      "id": "http://jsonschema.net/options/saved_segment_id",
                      "type": "string"
                    },
                    "match": {
                      "id": "http://jsonschema.net/options/match",
                      "type": "string"
                    },
                    "conditions": {
                      "id": "http://jsonschema.net/options/conditions",
                      "type": "array",
                      "items": {
                        "id": "http://jsonschema.net/options/conditions/0",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "list_id",
                "options"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "list_id": "example list_id",
              "options": {
                  "saved_segment_id": "example saved_segment_id",
                  "match": "example match",
                  "conditions": [
                      "..."
                  ]
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42
                }
  /send.json:
    post:
      description: <<Send a given campaign immediately. For RSS campaigns, this will "start" them.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /send-test.json:
    post:
      description: <<Send a test of this campaign to the provided email addresses>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "test_emails": {
                  "id": "http://jsonschema.net/test_emails",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/test_emails/0",
                    "type": "string"
                  }
                },
                "send_type": {
                  "id": "http://jsonschema.net/send_type",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid",
                "test_emails",
                "send_type"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "test_emails": [
                  "..."
              ],
              "send_type": "example send_type"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /template-content.json:
    post:
      description: <<Get the HTML template content sections for a campaign. Note that this will return very jagged, non-standard results based on the template a campaign is using. You only want to use this if you want to allow editing template sections in your application.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "...": "..."
                }
  /unschedule.json:
    post:
      description: <<Unschedule a campaign that is scheduled to be sent in the future>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /update.json:
    post:
      description: <<Update just about any setting besides type for a campaign that has not been sent. See campaigns/create() for details. Caveats:-
  
        If you set a new list_id, all segmentation options will be deleted and must be re-added.
        If you set template_id, you need to follow that up by setting it's 'content'
        If you set segment_opts, you should have tested your options against campaigns/segment-test().
        To clear/unset segment_opts, pass an empty string or array as the value. Various wrappers may require one or the other.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "name": {
                  "id": "http://jsonschema.net/name",
                  "type": "string"
                },
                "value": {
                  "id": "http://jsonschema.net/value",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/value/0",
                    "type": "string"
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "name",
                "value"
              ]
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "data": {
                      "...": "..."
                  },
                  "errors": [
                      {
                          "code": 42,
                          "message": "example message",
                          "name": "example name"
                      }
                  ]
                }
/ecomm:
  /order-add.json:
    post:
      description: <<Import Ecommerce Order Information to be used for Segmentation. This will generally be used by ecommerce package plugins provided by us or by 3rd part system developers:- http://connect.mailchimp.com/category/ecommerce>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "order": {
                  "id": "http://jsonschema.net/order",
                  "type": "object",
                  "properties": {
                    "id": {
                      "id": "http://jsonschema.net/order/id",
                      "type": "string"
                    },
                    "campaign_id": {
                      "id": "http://jsonschema.net/order/campaign_id",
                      "type": "string"
                    },
                    "email_id": {
                      "id": "http://jsonschema.net/order/email_id",
                      "type": "string"
                    },
                    "email": {
                      "id": "http://jsonschema.net/order/email",
                      "type": "string"
                    },
                    "total": {
                      "id": "http://jsonschema.net/order/total",
                      "type": "number"
                    },
                    "order_date": {
                      "id": "http://jsonschema.net/order/order_date",
                      "type": "string"
                    },
                    "shipping": {
                      "id": "http://jsonschema.net/order/shipping",
                      "type": "number"
                    },
                    "tax": {
                      "id": "http://jsonschema.net/order/tax",
                      "type": "number"
                    },
                    "store_id": {
                      "id": "http://jsonschema.net/order/store_id",
                      "type": "string"
                    },
                    "store_name": {
                      "id": "http://jsonschema.net/order/store_name",
                      "type": "string"
                    },
                    "items": {
                      "id": "http://jsonschema.net/order/items",
                      "type": "array",
                      "items": {
                        "id": "http://jsonschema.net/order/items/0",
                        "type": "object",
                        "properties": {
                          "line_num": {
                            "id": "http://jsonschema.net/order/items/0/line_num",
                            "type": "integer"
                          },
                          "product_id": {
                            "id": "http://jsonschema.net/order/items/0/product_id",
                            "type": "integer"
                          },
                          "sku": {
                            "id": "http://jsonschema.net/order/items/0/sku",
                            "type": "string"
                          },
                          "product_name": {
                            "id": "http://jsonschema.net/order/items/0/product_name",
                            "type": "string"
                          },
                          "category_id": {
                            "id": "http://jsonschema.net/order/items/0/category_id",
                            "type": "integer"
                          },
                          "category_name": {
                            "id": "http://jsonschema.net/order/items/0/category_name",
                            "type": "string"
                          },
                          "qty": {
                            "id": "http://jsonschema.net/order/items/0/qty",
                            "type": "number"
                          },
                          "cost": {
                            "id": "http://jsonschema.net/order/items/0/cost",
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "order"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "order": {
                  "id": "example id",
                  "campaign_id": "example campaign_id",
                  "email_id": "example email_id",
                  "email": "example email",
                  "total": 3.14159,
                  "order_date": "example order_date",
                  "shipping": 3.14159,
                  "tax": 3.14159,
                  "store_id": "example store_id",
                  "store_name": "example store_name",
                  "items": [
                      {
                          "line_num": 42,
                          "product_id": 42,
                          "sku": "example sku",
                          "product_name": "example product_name",
                          "category_id": 42,
                          "category_name": "example category_name",
                          "qty": 3.14159,
                          "cost": 3.14159
                      }
                  ]
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /order-del.json:
    post:
      description: <<Delete Ecommerce Order Information used for segmentation. This will generally be used by ecommerce package plugins provided by us or by 3rd part system developers:- http://connect.mailchimp.com/category/ecommerce>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "store_id": {
                  "id": "http://jsonschema.net/store_id",
                  "type": "string"
                },
                "order_id": {
                  "id": "http://jsonschema.net/order_id",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "store_id",
                "order_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "store_id": "example store_id",
              "order_id": "example order_id"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /orders.json:
    post:
      description: <<Retrieve the Ecommerce Orders for an account>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "start": {
                  "id": "http://jsonschema.net/start",
                  "type": "integer"
                },
                "limit": {
                  "id": "http://jsonschema.net/limit",
                  "type": "integer"
                },
                "since": {
                  "id": "http://jsonschema.net/since",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid",
                "start",
                "limit",
                "since"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "start": 42,
              "limit": 42,
              "since": "example since"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "store_id": "example store_id",
                          "store_name": "example store_name",
                          "order_id": "example order_id",
                          "email": "example email",
                          "order_total": 3.14159,
                          "tax_total": 3.14159,
                          "ship_total": 3.14159,
                          "order_date": "example order_date",
                          "items": [
                              {
                                  "line_num": 42,
                                  "product_id": 42,
                                  "product_name": "example product_name",
                                  "product_sku": "example product_sku",
                                  "product_category_id": 42,
                                  "product_category_name": "example product_category_name",
                                  "qty": 42,
                                  "cost": 3.14159
                              }
                          ]
                      }
                  ]
                }
/folders:
  /add.json:
    post:
      description: <<Add a new folder to file campaigns, autoresponders, or templates in>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "name": {
                  "id": "http://jsonschema.net/name",
                  "type": "string"
                },
                "type": {
                  "id": "http://jsonschema.net/type",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "name",
                "type"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "name": "example name",
              "type": "example type"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "folder_id": 42
                }
  /del.json:
    post:
      description: <<Delete a campaign, autoresponder, or template folder. Note that this will simply make whatever was in the folder appear unfiled, no other data is removed>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "fid": {
                  "id": "http://jsonschema.net/fid",
                  "type": "integer"
                },
                "type": {
                  "id": "http://jsonschema.net/type",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "fid",
                "type"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "fid": 42,
              "type": "example type"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /list.json:
    post:
      description: <<List all the folders of a certain type>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "type": {
                  "id": "http://jsonschema.net/type",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "type"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "type": "example type"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "folder_id": 42,
                      "name": "example name",
                      "date_created": "example date_created",
                      "type": "example type",
                      "cnt": 42
                  }
                ]
  /update.json:
    post:
      description: <<Update the name of a folder for campaigns, autoresponders, or templates>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "fid": {
                  "id": "http://jsonschema.net/fid",
                  "type": "integer"
                },
                "name": {
                  "id": "http://jsonschema.net/name",
                  "type": "string"
                },
                "type": {
                  "id": "http://jsonschema.net/type",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "fid",
                "name",
                "type"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "fid": 42,
              "name": "example name",
              "type": "example type"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
/gallery:
  /add-file-to-folder.json:
    post:
      description: <<Add a file to a folder>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "file_id": {
                  "id": "http://jsonschema.net/file_id",
                  "type": "integer"
                },
                "folder_id": {
                  "id": "http://jsonschema.net/folder_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "file_id",
                "folder_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "file_id": 42,
              "folder_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                true
  /add-folder.json:
    post:
      description: <<Adds a folder to the file gallery>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "name": {
                  "id": "http://jsonschema.net/name",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "name"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "name": "example name"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "data.id": 42
                }
  /list.json:
    post:
      description: <<Return a section of the image gallery>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "type": {
                      "id": "http://jsonschema.net/opts/type",
                      "type": "string"
                    },
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    },
                    "sort_by": {
                      "id": "http://jsonschema.net/opts/sort_by",
                      "type": "string"
                    },
                    "sort_dir": {
                      "id": "http://jsonschema.net/opts/sort_dir",
                      "type": "string"
                    },
                    "search_term": {
                      "id": "http://jsonschema.net/opts/search_term",
                      "type": "string"
                    },
                    "folder_id": {
                      "id": "http://jsonschema.net/opts/folder_id",
                      "type": "integer"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "opts"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "opts": {
                  "type": "example type",
                  "start": 42,
                  "limit": 42,
                  "sort_by": "example sort_by",
                  "sort_dir": "example sort_dir",
                  "search_term": "example search_term",
                  "folder_id": 42
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "id": 42,
                          "name": "example name",
                          "time": "example time",
                          "size": 42,
                          "full": "example full",
                          "thumb": "example thumb"
                      }
                  ]
                }
  /list-folders.json:
    post:
      description: <<Return a list of the folders available to the file gallery>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    },
                    "search_term": {
                      "id": "http://jsonschema.net/opts/search_term",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "opts"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "opts": {
                  "start": 42,
                  "limit": 42,
                  "search_term": "example search_term"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "id": 42,
                          "name": "example name",
                          "file_count": 42
                      }
                  ]
                }
  /remove-all-files-from-folder.json:
    post:
      description: <<Remove all files from a folder (Note that the files are not deleted, they are only removed from the folder)>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "folder_id": {
                  "id": "http://jsonschema.net/folder_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "folder_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "folder_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                true
  /remove-file-from-folder.json:
    post:
      description: <<Remove a file from a folder>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "file_id": {
                  "id": "http://jsonschema.net/file_id",
                  "type": "integer"
                },
                "folder_id": {
                  "id": "http://jsonschema.net/folder_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "file_id",
                "folder_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "file_id": 42,
              "folder_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                true
  /remove-folder.json:
    post:
      description: <<Remove a folder>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "folder_id": {
                  "id": "http://jsonschema.net/folder_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "folder_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "folder_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                true
/lists:
  /abuse-reports.json:
    post:
      description: <<Get all email addresses that complained about a campaign sent to a list>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "start": {
                  "id": "http://jsonschema.net/start",
                  "type": "integer"
                },
                "limit": {
                  "id": "http://jsonschema.net/limit",
                  "type": "integer"
                },
                "since": {
                  "id": "http://jsonschema.net/since",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id",
                "start",
                "limit",
                "since"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "start": 42,
              "limit": 42,
              "since": "example since"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "date": "example date",
                          "email": "example email",
                          "campaign_id": "example campaign_id",
                          "type": "example type"
                      }
                  ]
                }
  /activity.json:
    post:
      description: <<Access up to the previous 180 days of daily detailed aggregated activity stats for a given list. Does not include AutoResponder activity.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  "..."
                ]
  /batch-subscribe.json:
    post:
      description: <<Subscribe a batch of email addresses to a list at once. If you are using a serialized version of the API, we strongly suggest that you only run this method as a POST request, and not a GET request. Maximum batch sizes vary based on the amount of data in each record, though you should cap them at 5k - 10k records, depending on your experience. These calls are also long, so be sure you increase your timeout values.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "batch": {
                  "id": "http://jsonschema.net/batch",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/batch/0",
                    "type": "object",
                    "properties": {
                      "email": {
                        "id": "http://jsonschema.net/batch/0/email",
                        "type": "object",
                        "properties": {
                          "email": {
                            "id": "http://jsonschema.net/batch/0/email/email",
                            "type": "string"
                          },
                          "euid": {
                            "id": "http://jsonschema.net/batch/0/email/euid",
                            "type": "string"
                          },
                          "leid": {
                            "id": "http://jsonschema.net/batch/0/email/leid",
                            "type": "string"
                          }
                        }
                      },
                      "email_type": {
                        "id": "http://jsonschema.net/batch/0/email_type",
                        "type": "string"
                      },
                      "merge_vars": {
                        "id": "http://jsonschema.net/batch/0/merge_vars",
                        "type": "object",
                        "properties": {
                          "...": {
                            "id": "http://jsonschema.net/batch/0/merge_vars/...",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "double_optin": {
                  "id": "http://jsonschema.net/double_optin",
                  "type": "boolean"
                },
                "update_existing": {
                  "id": "http://jsonschema.net/update_existing",
                  "type": "boolean"
                },
                "replace_interests": {
                  "id": "http://jsonschema.net/replace_interests",
                  "type": "boolean"
                }
              },
              "required": [
                "apikey",
                "id",
                "batch",
                "double_optin",
                "update_existing",
                "replace_interests"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "batch": [
                  {
                      "email": {
                          "email": "example email",
                          "euid": "example euid",
                          "leid": "example leid"
                      },
                      "email_type": "example email_type",
                      "merge_vars": {
                          "...": "..."
                      }
                  }
              ],
              "double_optin": true,
              "update_existing": true,
              "replace_interests": true
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "add_count": 42,
                  "adds": [
                      {
                          "email": "example email",
                          "euid": "example euid",
                          "leid": "example leid"
                      }
                  ],
                  "update_count": 42,
                  "updates": [
                      {
                          "email": "example email",
                          "euid": "example euid",
                          "leid": "example leid"
                      }
                  ],
                  "error_count": 42,
                  "errors": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          },
                          "code": 42,
                          "error": "example error",
                          "row": {
                              "...": "..."
                          }
                      }
                  ]
                }
  /batch-unsubscribe.json:
    post:
      description: <<Unsubscribe a batch of email addresses from a list>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "batch": {
                  "id": "http://jsonschema.net/batch",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/batch/0",
                    "type": "object",
                    "properties": {
                      "email": {
                        "id": "http://jsonschema.net/batch/0/email",
                        "type": "object",
                        "properties": {
                          "email": {
                            "id": "http://jsonschema.net/batch/0/email/email",
                            "type": "string"
                          },
                          "euid": {
                            "id": "http://jsonschema.net/batch/0/email/euid",
                            "type": "string"
                          },
                          "leid": {
                            "id": "http://jsonschema.net/batch/0/email/leid",
                            "type": "string"
                          }
                        }
                      },
                      "email_type": {
                        "id": "http://jsonschema.net/batch/0/email_type",
                        "type": "string"
                      },
                      "merge_vars": {
                        "id": "http://jsonschema.net/batch/0/merge_vars",
                        "type": "object",
                        "properties": {
                          "...": {
                            "id": "http://jsonschema.net/batch/0/merge_vars/...",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "double_optin": {
                  "id": "http://jsonschema.net/double_optin",
                  "type": "boolean"
                },
                "update_existing": {
                  "id": "http://jsonschema.net/update_existing",
                  "type": "boolean"
                },
                "replace_interests": {
                  "id": "http://jsonschema.net/replace_interests",
                  "type": "boolean"
                }
              },
              "required": [
                "apikey",
                "id",
                "batch",
                "double_optin",
                "update_existing",
                "replace_interests"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "batch": [
                  {
                      "email": "example email",
                      "euid": "example euid",
                      "leid": "example leid"
                  }
              ],
              "delete_member": true,
              "send_goodbye": true,
              "send_notify": true
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "success_count": 42,
                      "error_count": 42,
                      "errors": [
                          {
                              "email": {
                                  "email": "example email",
                                  "euid": "example euid",
                                  "leid": "example leid"
                              },
                              "code": 42,
                              "error": "example error"
                          }
                      ]
                  }
                ]
  /clients.json:
    post:
      description: <<Retrieve the clients that the list's subscribers have been tagged as being used based on user agents seen. Made possible by user-agent-string.info:- http://user-agent-string.info/>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "desktop": {
                      "penetration": 3.14159,
                      "clients": [
                          {
                              "client": "example client",
                              "icon": "example icon",
                              "percent": "example percent",
                              "members": "example members"
                          }
                      ]
                  },
                  "mobile": {
                      "penetration": 3.14159,
                      "clients": [
                          {
                              "client": "example client",
                              "icon": "example icon",
                              "percent": "example percent",
                              "members": "example members"
                          }
                      ]
                  }
                }
  /growth-history.json:
    post:
      description: <<Access the Growth History by Month in aggregate or for a given list.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "month": "example month",
                      "existing": 42,
                      "imports": 42,
                      "optins": 42
                  }
                ]
  /interest-group-add.json:
    post:
      description: <<Add a single Interest Group - if interest groups for the List are not yet enabled, adding the first group will automatically turn them on.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "group_name": {
                  "id": "http://jsonschema.net/group_name",
                  "type": "string"
                },
                "grouping_id": {
                  "id": "http://jsonschema.net/grouping_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "id",
                "group_name",
                "grouping_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "group_name": "example group_name",
              "grouping_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /interest-group-del.json:
    post:
      description: <<Delete a single Interest Group - if the last group for a list is deleted, this will also turn groups for the list off.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "group_name": {
                  "id": "http://jsonschema.net/group_name",
                  "type": "string"
                },
                "grouping_id": {
                  "id": "http://jsonschema.net/grouping_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "id",
                "group_name",
                "grouping_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "group_name": "example group_name",
              "grouping_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /interest-grouping-update.json:
    post:
      description: <<Update an existing Interest Grouping>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "grouping_id": {
                  "id": "http://jsonschema.net/grouping_id",
                  "type": "integer"
                },
                "name": {
                  "id": "http://jsonschema.net/name",
                  "type": "string"
                },
                "value": {
                  "id": "http://jsonschema.net/value",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "grouping_id",
                "name",
                "value"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "grouping_id": 42,
              "name": "example name",
              "value": "example value"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /interest-groupings.json:
    post:
      description: <<Get the list of interest groupings for a given list, including the label, form information, and included groups for each>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "counts": {
                  "id": "http://jsonschema.net/counts",
                  "type": "boolean"
                }
              },
              "required": [
                "apikey",
                "id",
                "counts"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "counts": true
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "id": 42,
                      "name": "example name",
                      "form_field": "example form_field",
                      "groups": [
                          {
                              "bit": "example bit",
                              "name": "example name",
                              "display_order": "example display_order",
                              "subscribers": 42
                          }
                      ]
                  }
                ]
  /list.json:
    post:
      description: <<Retrieve all of the lists defined for your user account>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "filters": {
                  "id": "http://jsonschema.net/filters",
                  "type": "object",
                  "properties": {
                    "list_id": {
                      "id": "http://jsonschema.net/filters/list_id",
                      "type": "string"
                    },
                    "list_name": {
                      "id": "http://jsonschema.net/filters/list_name",
                      "type": "string"
                    },
                    "from_name": {
                      "id": "http://jsonschema.net/filters/from_name",
                      "type": "string"
                    },
                    "from_email": {
                      "id": "http://jsonschema.net/filters/from_email",
                      "type": "string"
                    },
                    "from_subject": {
                      "id": "http://jsonschema.net/filters/from_subject",
                      "type": "string"
                    },
                    "created_before": {
                      "id": "http://jsonschema.net/filters/created_before",
                      "type": "string"
                    },
                    "created_after": {
                      "id": "http://jsonschema.net/filters/created_after",
                      "type": "string"
                    },
                    "exact": {
                      "id": "http://jsonschema.net/filters/exact",
                      "type": "boolean"
                    }
                  }
                },
                "start": {
                  "id": "http://jsonschema.net/start",
                  "type": "integer"
                },
                "limit": {
                  "id": "http://jsonschema.net/limit",
                  "type": "integer"
                },
                "sort_field": {
                  "id": "http://jsonschema.net/sort_field",
                  "type": "string"
                },
                "sort_dir": {
                  "id": "http://jsonschema.net/sort_dir",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "filters",
                "start",
                "limit",
                "sort_field",
                "sort_dir"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "filters": {
                  "list_id": "example list_id",
                  "list_name": "example list_name",
                  "from_name": "example from_name",
                  "from_email": "example from_email",
                  "from_subject": "example from_subject",
                  "created_before": "example created_before",
                  "created_after": "example created_after",
                  "exact": true
              },
              "start": 42,
              "limit": 42,
              "sort_field": "example sort_field",
              "sort_dir": "example sort_dir"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "id": "example id",
                          "web_id": 42,
                          "name": "example name",
                          "date_created": "example date_created",
                          "email_type_option": true,
                          "use_awesomebar": true,
                          "default_from_name": "example default_from_name",
                          "default_from_email": "example default_from_email",
                          "default_subject": "example default_subject",
                          "default_language": "example default_language",
                          "list_rating": 3.14159,
                          "subscribe_url_short": "example subscribe_url_short",
                          "subscribe_url_long": "example subscribe_url_long",
                          "beamer_address": "example beamer_address",
                          "visibility": "example visibility",
                          "stats": {
                              "member_count": 3.14159,
                              "unsubscribe_count": 3.14159,
                              "cleaned_count": 3.14159,
                              "member_count_since_send": 3.14159,
                              "unsubscribe_count_since_send": 3.14159,
                              "cleaned_count_since_send": 3.14159,
                              "campaign_count": 3.14159,
                              "grouping_count": 3.14159,
                              "group_count": 3.14159,
                              "merge_var_count": 3.14159,
                              "avg_sub_rate": 3.14159,
                              "avg_unsub_rate": 3.14159,
                              "target_sub_rate": 3.14159,
                              "open_rate": 3.14159,
                              "click_rate": 3.14159
                          },
                          "modules": [
                              "..."
                          ]
                      }
                  ],
                  "errors": [
                      {
                          "param": "example param",
                          "code": 42,
                          "error": "example error"
                      }
                  ]
                }
  /locations.json:
    post:
      description: <<Retrieve the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  "..."
                ]
  /member-activity.json:
    post:
      description: <<Get the most recent 100 activities for particular list members (open, click, bounce, unsub, abuse, sent to, etc.)>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "emails": {
                  "id": "http://jsonschema.net/emails",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/emails/0",
                    "type": "object",
                    "properties": {
                      "email": {
                        "id": "http://jsonschema.net/emails/0/email",
                        "type": "string"
                      },
                      "euid": {
                        "id": "http://jsonschema.net/emails/0/euid",
                        "type": "string"
                      },
                      "leid": {
                        "id": "http://jsonschema.net/emails/0/leid",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "id",
                "emails"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "emails": [
                  {
                      "email": "example email",
                      "euid": "example euid",
                      "leid": "example leid"
                  }
              ]
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "success_count": 42,
                  "error_count": 42,
                  "errors": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          },
                          "error": "example error",
                          "code": "example code"
                      }
                  ],
                  "data": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          },
                          "activity": [
                              {
                                  "action": "example action",
                                  "timestamp": "example timestamp",
                                  "url": "example url",
                                  "type": "example type",
                                  "campaign_id": "example campaign_id",
                                  "campaign_data": {
                                      "...": "..."
                                  }
                              }
                          ]
                      }
                  ]
                }
  /member-info.json:
    post:
      description: <<Get all the information for particular members of a list>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "emails": {
                  "id": "http://jsonschema.net/emails",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/emails/0",
                    "type": "object",
                    "properties": {
                      "email": {
                        "id": "http://jsonschema.net/emails/0/email",
                        "type": "string"
                      },
                      "euid": {
                        "id": "http://jsonschema.net/emails/0/euid",
                        "type": "string"
                      },
                      "leid": {
                        "id": "http://jsonschema.net/emails/0/leid",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "id",
                "emails"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "emails": [
                  {
                      "email": "example email",
                      "euid": "example euid",
                      "leid": "example leid"
                  }
              ]
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "success_count": 42,
                  "error_count": 42,
                  "errors": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          },
                          "error": "example error"
                      }
                  ],
                  "data": [
                      {
                          "id": "example id",
                          "email": "example email",
                          "email_type": "example email_type",
                          "merges": {
                              "GROUPINGS": [
                                  {
                                      "id": 42,
                                      "name": "example name",
                                      "groups": [
                                          {
                                              "name": "example name",
                                              "interested": true
                                          }
                                      ]
                                  }
                              ]
                          },
                          "status": "example status",
                          "ip_signup": "example ip_signup",
                          "timestamp_signup": "example timestamp_signup",
                          "ip_opt": "example ip_opt",
                          "timestamp_opt": "example timestamp_opt",
                          "member_rating": 42,
                          "campaign_id": "example campaign_id",
                          "lists": [
                              {
                                  "id": "example id",
                                  "status": "example status"
                              }
                          ],
                          "timestamp": "example timestamp",
                          "info_changed": "example info_changed",
                          "web_id": 42,
                          "leid": 42,
                          "list_id": "example list_id",
                          "list_name": "example list_name",
                          "language": "example language",
                          "is_gmonkey": true,
                          "geo": {
                              "latitude": "example latitude",
                              "longitude": "example longitude",
                              "gmtoff": "example gmtoff",
                              "dstoff": "example dstoff",
                              "timezone": "example timezone",
                              "cc": "example cc",
                              "region": "example region"
                          },
                          "clients": {
                              "name": "example name",
                              "icon_url": "example icon_url"
                          },
                          "static_segments": [
                              {
                                  "id": 42,
                                  "name": "example name",
                                  "added": "example added"
                              }
                          ],
                          "notes": [
                              {
                                  "id": 42,
                                  "note": "example note",
                                  "created": "example created",
                                  "updated": "example updated",
                                  "created_by_name": "example created_by_name"
                              }
                          ]
                      }
                  ]
                }
  /members.json:
    post:
      description: <<Get all of the list members for a list that are of a particular status and potentially matching a segment. This will cause locking, so don't run multiples at once. Are you trying to get a dump including lots of merge data or specific members of a list? If so, checkout the List Export API:- https://apidocs.mailchimp.com/export/1.0/list.func.php>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "status": {
                  "id": "http://jsonschema.net/status",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    },
                    "sort_field": {
                      "id": "http://jsonschema.net/opts/sort_field",
                      "type": "string"
                    },
                    "sort_dir": {
                      "id": "http://jsonschema.net/opts/sort_dir",
                      "type": "string"
                    },
                    "segment": {
                      "id": "http://jsonschema.net/opts/segment",
                      "type": "object",
                      "properties": {
                        "...": {
                          "id": "http://jsonschema.net/opts/segment/...",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "id",
                "status",
                "opts"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "status": "example status",
              "opts": {
                  "start": 42,
                  "limit": 42,
                  "sort_field": "example sort_field",
                  "sort_dir": "example sort_dir",
                  "segment": {
                      "...": "..."
                  }
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      "..."
                  ]
                }
  /merge-var-add.json:
    post:
      description: <<Add a new merge tag to a given list>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "tag": {
                  "id": "http://jsonschema.net/tag",
                  "type": "string"
                },
                "name": {
                  "id": "http://jsonschema.net/name",
                  "type": "string"
                },
                "options": {
                  "id": "http://jsonschema.net/options",
                  "type": "object",
                  "properties": {
                    "field_type": {
                      "id": "http://jsonschema.net/options/field_type",
                      "type": "string"
                    },
                    "req": {
                      "id": "http://jsonschema.net/options/req",
                      "type": "boolean"
                    },
                    "public": {
                      "id": "http://jsonschema.net/options/public",
                      "type": "boolean"
                    },
                    "show": {
                      "id": "http://jsonschema.net/options/show",
                      "type": "boolean"
                    },
                    "order": {
                      "id": "http://jsonschema.net/options/order",
                      "type": "integer"
                    },
                    "default_value": {
                      "id": "http://jsonschema.net/options/default_value",
                      "type": "string"
                    },
                    "helptext": {
                      "id": "http://jsonschema.net/options/helptext",
                      "type": "string"
                    },
                    "choices": {
                      "id": "http://jsonschema.net/options/choices",
                      "type": "array",
                      "items": {
                        "id": "http://jsonschema.net/options/choices/0",
                        "type": "string"
                      }
                    },
                    "dateformat": {
                      "id": "http://jsonschema.net/options/dateformat",
                      "type": "string"
                    },
                    "phoneformat": {
                      "id": "http://jsonschema.net/options/phoneformat",
                      "type": "string"
                    },
                    "defaultcountry": {
                      "id": "http://jsonschema.net/options/defaultcountry",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "id",
                "tag",
                "name",
                "options"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "tag": "example tag",
              "name": "example name",
              "options": {
                  "field_type": "example field_type",
                  "req": true,
                  "public": true,
                  "show": true,
                  "order": 42,
                  "default_value": "example default_value",
                  "helptext": "example helptext",
                  "choices": [
                      "..."
                  ],
                  "dateformat": "example dateformat",
                  "phoneformat": "example phoneformat",
                  "defaultcountry": "example defaultcountry"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "name": "example name",
                  "req": true,
                  "field_type": "example field_type",
                  "public": true,
                  "show": true,
                  "order": "example order",
                  "default": "example default",
                  "helptext": "example helptext",
                  "size": "example size",
                  "tag": "example tag",
                  "choices": [
                      "..."
                  ],
                  "id": 42
                }
  /merge-var-del.json:
    post:
      description: <<Delete a merge tag from a given list and all its members. Seriously - the data is removed from all members as well! Note that on large lists this method may seem a bit slower than calls you typically make.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "tag": {
                  "id": "http://jsonschema.net/tag",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id",
                "tag"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "tag": "example tag"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /merge-var-reset.json:
    post:
      description: <<Completely resets all data stored in a merge var on a list. All data is removed and this action can not be undone.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "tag": {
                  "id": "http://jsonschema.net/tag",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id",
                "tag"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "tag": "example tag"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /merge-var-set.json:
    post:
      description: <<Sets a particular merge var to the specified value for every list member. Only merge var ids 1 - 30 may be modified this way. This is generally a dirty method unless you're fixing data since you should probably be using default_values and/or conditional content. as with lists/merge-var-reset(), this can not be undone.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "tag": {
                  "id": "http://jsonschema.net/tag",
                  "type": "string"
                },
                "value": {
                  "id": "http://jsonschema.net/value",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id",
                "tag",
                "value"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "tag": "example tag",
              "value": "example value"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /merge-vars.json:
    post:
      description: <<Sets a particular merge var to the specified value for every list member. Only merge var ids 1 - 30 may be modified this way. This is generally a dirty method unless you're fixing data since you should probably be using default_values and/or conditional content. as with lists/merge-var-reset(), this can not be undone.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/id/0",
                    "type": "string"
                  }
                }
              },
              "required": [
                "apikey",
                "id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": [
                  "..."
              ]
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "success_count": 42,
                  "error_count": 42,
                  "data": [
                      {
                          "id": "example id",
                          "name": "example name",
                          "merge_vars": [
                              {
                                  "name": "example name",
                                  "req": true,
                                  "field_type": "example field_type",
                                  "public": true,
                                  "show": true,
                                  "order": "example order",
                                  "default": "example default",
                                  "helptext": "example helptext",
                                  "size": "example size",
                                  "tag": "example tag",
                                  "choices": [
                                      "..."
                                  ],
                                  "id": 42
                              }
                          ]
                      }
                  ],
                  "errors": [
                      {
                          "id": "example id",
                          "code": 42,
                          "msg": "example msg"
                      }
                  ]
                }
  /segment-add.json:
    post:
      description: <<Save a segment against a list for later use. There is no limit to the number of segments which can be saved. Static Segments are not tied to any merge data, interest groups, etc. They essentially allow you to configure an unlimited number of custom segments which will have standard performance. When using proper segments, Static Segments are one of the available options for segmentation just as if you used a merge var (and they can be used with other segmentation options), though performance may degrade at that point. Saved Segments (called "auto-updating" in the app) are essentially just the match+conditions typically used.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "type": {
                      "id": "http://jsonschema.net/opts/type",
                      "type": "string"
                    },
                    "name": {
                      "id": "http://jsonschema.net/opts/name",
                      "type": "string"
                    },
                    "segment_opts": {
                      "id": "http://jsonschema.net/opts/segment_opts",
                      "type": "object",
                      "properties": {
                        "match": {
                          "id": "http://jsonschema.net/opts/segment_opts/match",
                          "type": "string"
                        },
                        "conditions": {
                          "id": "http://jsonschema.net/opts/segment_opts/conditions",
                          "type": "array",
                          "items": {
                            "id": "http://jsonschema.net/opts/segment_opts/conditions/0",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "id",
                "opts"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "opts": {
                  "type": "example type",
                  "name": "example name",
                  "segment_opts": {
                      "match": "example match",
                      "conditions": [
                          "..."
                      ]
                  }
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "id": 42
                }
  /segment-del.json:
    post:
      description: <<Delete a segment. Note that this will, of course, remove any member affiliations with any static segments deleted>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "seg_id": {
                  "id": "http://jsonschema.net/seg_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "id",
                "seg_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "seg_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /segment-test.json:
    post:
      description: <<Allows one to test their segmentation rules before creating a campaign using them - this is no different from campaigns/segment-test() and will eventually replace it. For the time being, the crazy segmenting condition documentation will continue to live over there.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "list_id": {
                  "id": "http://jsonschema.net/list_id",
                  "type": "string"
                },
                "options": {
                  "id": "http://jsonschema.net/options",
                  "type": "object",
                  "properties": {
                    "...": {
                      "id": "http://jsonschema.net/options/...",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "list_id",
                "options"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "list_id": "example list_id",
              "options": {
                  "...": "..."
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42
                }
  /segment-update.json:
    post:
      description: <<Update an existing segment. The list and type can not be changed.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "seg_id": {
                  "id": "http://jsonschema.net/seg_id",
                  "type": "integer"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "name": {
                      "id": "http://jsonschema.net/opts/name",
                      "type": "string"
                    },
                    "segment_opts": {
                      "id": "http://jsonschema.net/opts/segment_opts",
                      "type": "object",
                      "properties": {
                        "match": {
                          "id": "http://jsonschema.net/opts/segment_opts/match",
                          "type": "string"
                        },
                        "conditions": {
                          "id": "http://jsonschema.net/opts/segment_opts/conditions",
                          "type": "array",
                          "items": {
                            "id": "http://jsonschema.net/opts/segment_opts/conditions/0",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "id",
                "seg_id",
                "opts"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "seg_id": 42,
              "opts": {
                "name": "example name",
                "segment_opts": {
                  "match": "example match",
                  "conditions": [
                    "..."
                  ]
                }
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /segments.json:
    post:
      description: <<Retrieve all of Segments for a list.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "type": {
                  "id": "http://jsonschema.net/type",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id",
                "type"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "type": "example type"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "static": [
                      {
                          "id": 42,
                          "name": "example name",
                          "created_date": "example created_date",
                          "last_update": "example last_update",
                          "last_reset": "example last_reset"
                      }
                  ],
                  "saved": [
                      {
                          "id": 42,
                          "name": "example name",
                          "segment_opts": "example segment_opts",
                          "segment_text": "example segment_text"
                      }
                  ],
                  "created_date": "example created_date",
                  "last_update": "example last_update"
                }
  /static-segment-add.json:
    post:
      description: <<Save a segment against a list for later use. There is no limit to the number of segments which can be saved. Static Segments are not tied to any merge data, interest groups, etc. They essentially allow you to configure an unlimited number of custom segments which will have standard performance. When using proper segments, Static Segments are one of the available options for segmentation just as if you used a merge var (and they can be used with other segmentation options), though performance may degrade at that point.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "name": {
                  "id": "http://jsonschema.net/name",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id",
                "name"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "name": "example name"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "id": 42
                }
  /static-segment-del.json:
    post:
      description: <<Delete a static segment. Note that this will, of course, remove any member affiliations with the segment>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "seg_id": {
                  "id": "http://jsonschema.net/seg_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "id",
                "seg_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "seg_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /static-segment-reset.json:
    post:
      description: <<Resets a static segment - removes all members from the static  segment. Note:- does not actually affect list member data>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "seg_id": {
                  "id": "http://jsonschema.net/seg_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "id",
                "seg_id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "seg_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /static-segments.json:
    post:
      description: <<Retrieve all of the Static Segments for a list.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "get_counts": {
                  "id": "http://jsonschema.net/get_counts",
                  "type": "boolean"
                },
                "start": {
                  "id": "http://jsonschema.net/start",
                  "type": "integer"
                },
                "limit": {
                  "id": "http://jsonschema.net/limit",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "id",
                "get_counts",
                "start",
                "limit"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "get_counts": true,
              "start": 42,
              "limit": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "id": 42,
                      "name": "example name",
                      "member_count": 42,
                      "created_date": "example created_date",
                      "last_update": "example last_update",
                      "last_reset": "example last_reset"
                  }
                ]
  /subscribe.json:
    post:
      description: <<Subscribe the provided email to a list. By default this sends a confirmation email - you will not see new members until the link contained in it is clicked!>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "object",
                  "properties": {
                    "email": {
                      "id": "http://jsonschema.net/email/email",
                      "type": "string"
                    },
                    "euid": {
                      "id": "http://jsonschema.net/email/euid",
                      "type": "string"
                    },
                    "leid": {
                      "id": "http://jsonschema.net/email/leid",
                      "type": "string"
                    }
                  }
                },
                "merge_vars": {
                  "id": "http://jsonschema.net/merge_vars",
                  "type": "object",
                  "properties": {
                    "new-email": {
                      "id": "http://jsonschema.net/merge_vars/new-email",
                      "type": "string"
                    },
                    "groupings": {
                      "id": "http://jsonschema.net/merge_vars/groupings",
                      "type": "array",
                      "items": {
                        "id": "http://jsonschema.net/merge_vars/groupings/0",
                        "type": "object",
                        "properties": {
                          "id": {
                            "id": "http://jsonschema.net/merge_vars/groupings/0/id",
                            "type": "integer"
                          },
                          "name": {
                            "id": "http://jsonschema.net/merge_vars/groupings/0/name",
                            "type": "string"
                          },
                          "groups": {
                            "id": "http://jsonschema.net/merge_vars/groupings/0/groups",
                            "type": "array",
                            "items": {
                              "id": "http://jsonschema.net/merge_vars/groupings/0/groups/0",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "optin_ip": {
                      "id": "http://jsonschema.net/merge_vars/optin_ip",
                      "type": "string"
                    },
                    "optin_time": {
                      "id": "http://jsonschema.net/merge_vars/optin_time",
                      "type": "string"
                    },
                    "mc_location": {
                      "id": "http://jsonschema.net/merge_vars/mc_location",
                      "type": "object",
                      "properties": {
                        "latitude": {
                          "id": "http://jsonschema.net/merge_vars/mc_location/latitude",
                          "type": "string"
                        },
                        "longitude": {
                          "id": "http://jsonschema.net/merge_vars/mc_location/longitude",
                          "type": "string"
                        },
                        "anything": {
                          "id": "http://jsonschema.net/merge_vars/mc_location/anything",
                          "type": "string"
                        }
                      }
                    },
                    "mc_language": {
                      "id": "http://jsonschema.net/merge_vars/mc_language",
                      "type": "string"
                    },
                    "mc_notes": {
                      "id": "http://jsonschema.net/merge_vars/mc_notes",
                      "type": "array",
                      "items": {
                        "id": "http://jsonschema.net/merge_vars/mc_notes/0",
                        "type": "object",
                        "properties": {
                          "note": {
                            "id": "http://jsonschema.net/merge_vars/mc_notes/0/note",
                            "type": "string"
                          },
                          "id": {
                            "id": "http://jsonschema.net/merge_vars/mc_notes/0/id",
                            "type": "integer"
                          },
                          "action": {
                            "id": "http://jsonschema.net/merge_vars/mc_notes/0/action",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "email_type": {
                  "id": "http://jsonschema.net/email_type",
                  "type": "string"
                },
                "double_optin": {
                  "id": "http://jsonschema.net/double_optin",
                  "type": "boolean"
                },
                "update_existing": {
                  "id": "http://jsonschema.net/update_existing",
                  "type": "boolean"
                },
                "replace_interests": {
                  "id": "http://jsonschema.net/replace_interests",
                  "type": "boolean"
                },
                "send_welcome": {
                  "id": "http://jsonschema.net/send_welcome",
                  "type": "boolean"
                }
              },
              "required": [
                "apikey",
                "id",
                "email",
                "merge_vars",
                "email_type",
                "double_optin",
                "update_existing",
                "replace_interests",
                "send_welcome"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "email": {
                "email": "example email",
                "euid": "example euid",
                "leid": "example leid"
              },
              "merge_vars": {
                "new-email": "example new-email",
                "groupings": [
                  {
                    "id": 42,
                    "name": "example name",
                    "groups": [
                      "..."
                    ]
                  }
                ],
                "optin_ip": "example optin_ip",
                "optin_time": "example optin_time",
                "mc_location": {
                  "latitude": "example latitude",
                  "longitude": "example longitude",
                  "anything": "example anything"
                },
                "mc_language": "example mc_language",
                "mc_notes": [
                  {
                    "note": "example note",
                    "id": 42,
                    "action": "example action"
                  }
                ]
              },
              "email_type": "example email_type",
              "double_optin": true,
              "update_existing": true,
              "replace_interests": true,
              "send_welcome": true
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "email": "example email",
                  "euid": "example euid",
                  "leid": "example leid"
                }
  /unsubscribe.json:
    post:
      description: <<Unsubscribe the given email address from the list>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "object",
                  "properties": {
                    "email": {
                      "id": "http://jsonschema.net/email/email",
                      "type": "string"
                    },
                    "euid": {
                      "id": "http://jsonschema.net/email/euid",
                      "type": "string"
                    },
                    "leid": {
                      "id": "http://jsonschema.net/email/leid",
                      "type": "string"
                    }
                  }
                },
                "delete_member": {
                  "id": "http://jsonschema.net/delete_member",
                  "type": "boolean"
                },
                "send_goodbye": {
                  "id": "http://jsonschema.net/send_goodbye",
                  "type": "boolean"
                },
                "send_notify": {
                  "id": "http://jsonschema.net/send_notify",
                  "type": "boolean"
                }
              },
              "required": [
                "apikey",
                "id",
                "email",
                "delete_member",
                "send_goodbye",
                "send_notify"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "email": {
                "email": "example email",
                "euid": "example euid",
                "leid": "example leid"
              },
              "delete_member": true,
              "send_goodbye": true,
              "send_notify": true
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /update-member.json:
    post:
      description: <<Edit the email address, merge fields, and interest groups for a list member. If you are doing a batch update on lots of users, consider using lists/batch-subscribe() with the update_existing and possible replace_interests parameter.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "object",
                  "properties": {
                    "email": {
                      "id": "http://jsonschema.net/email/email",
                      "type": "string"
                    },
                    "euid": {
                      "id": "http://jsonschema.net/email/euid",
                      "type": "string"
                    },
                    "leid": {
                      "id": "http://jsonschema.net/email/leid",
                      "type": "string"
                    }
                  }
                },
                "merge_vars": {
                  "id": "http://jsonschema.net/merge_vars",
                  "type": "object",
                  "properties": {
                    "...": {
                      "id": "http://jsonschema.net/merge_vars/...",
                      "type": "string"
                    }
                  }
                },
                "email_type": {
                  "id": "http://jsonschema.net/email_type",
                  "type": "string"
                },
                "replace_interests": {
                  "id": "http://jsonschema.net/replace_interests",
                  "type": "boolean"
                }
              },
              "required": [
                "apikey",
                "id",
                "email",
                "merge_vars",
                "email_type",
                "replace_interests"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "email": {
                "email": "example email",
                "euid": "example euid",
                "leid": "example leid"
              },
              "merge_vars": {
                "...": "..."
              },
              "email_type": "example email_type",
              "replace_interests": true
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "email": "example email",
                  "euid": "example euid",
                  "leid": "example leid"
                }
  /webhook-add.json:
    post:
      description: <<Add a new Webhook URL for the given list>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "url": {
                  "id": "http://jsonschema.net/url",
                  "type": "string"
                },
                "actions": {
                  "id": "http://jsonschema.net/actions",
                  "type": "object",
                  "properties": {
                    "subscribe": {
                      "id": "http://jsonschema.net/actions/subscribe",
                      "type": "boolean"
                    },
                    "unsubscribe": {
                      "id": "http://jsonschema.net/actions/unsubscribe",
                      "type": "boolean"
                    },
                    "profile": {
                      "id": "http://jsonschema.net/actions/profile",
                      "type": "boolean"
                    },
                    "cleaned": {
                      "id": "http://jsonschema.net/actions/cleaned",
                      "type": "boolean"
                    },
                    "upemail": {
                      "id": "http://jsonschema.net/actions/upemail",
                      "type": "boolean"
                    },
                    "campaign": {
                      "id": "http://jsonschema.net/actions/campaign",
                      "type": "boolean"
                    }
                  }
                },
                "sources": {
                  "id": "http://jsonschema.net/sources",
                  "type": "object",
                  "properties": {
                    "user": {
                      "id": "http://jsonschema.net/sources/user",
                      "type": "boolean"
                    },
                    "admin": {
                      "id": "http://jsonschema.net/sources/admin",
                      "type": "boolean"
                    },
                    "api": {
                      "id": "http://jsonschema.net/sources/api",
                      "type": "boolean"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "id",
                "url",
                "actions",
                "sources"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "url": "example url",
              "actions": {
                "subscribe": true,
                "unsubscribe": true,
                "profile": true,
                "cleaned": true,
                "upemail": true,
                "campaign": true
              },
              "sources": {
                "user": true,
                "admin": true,
                "api": true
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "id": 42
                }
  /webhook-del.json:
    post:
      description: <<Delete an existing Webhook URL from a given list>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "url": {
                  "id": "http://jsonschema.net/url",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id",
                "url"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "url": "example url"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /webhooks.json:
    post:
      description: <<Return the Webhooks configured for the given list>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "id"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "id": "example id"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "url": "example url",
                      "actions": {
                          "subscribe": true,
                          "unsubscribe": true,
                          "profile": true,
                          "cleaned": true,
                          "upemail": true,
                          "campaign": true
                      },
                      "sources": {
                          "user": true,
                          "admin": true,
                          "api": true
                      }
                  }
                ]
/helper:
  /account-details.json:
    post:
      description: <<Retrieve lots of account information including payments made, plan info, some account stats, installed modules, contact info, and more. No private information like Credit Card numbers is available.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "exclude": {
                  "id": "http://jsonschema.net/exclude",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/exclude/0",
                    "type": "string"
                  }
                }
              },
              "required": [
                "apikey",
                "exclude"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "exclude": [
                "..."
              ]
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "username": "example username",
                  "user_id": "example user_id",
                  "is_trial": true,
                  "is_approved": true,
                  "has_activated": true,
                  "timezone": "example timezone",
                  "plan_type": "example plan_type",
                  "plan_low": 42,
                  "plan_high": 42,
                  "plan_start_date": "example plan_start_date",
                  "emails_left": 42,
                  "pending_monthly": true,
                  "first_payment": "example first_payment",
                  "last_payment": "example last_payment",
                  "times_logged_in": 42,
                  "last_login": "example last_login",
                  "affiliate_link": "example affiliate_link",
                  "industry": "example industry",
                  "contact": {
                      "fname": "example fname",
                      "lname": "example lname",
                      "email": "example email",
                      "company": "example company",
                      "address1": "example address1",
                      "address2": "example address2",
                      "city": "example city",
                      "state": "example state",
                      "zip": "example zip",
                      "country": "example country",
                      "url": "example url",
                      "phone": "example phone",
                      "fax": "example fax"
                  },
                  "modules": [
                      "..."
                  ],
                  "orders": [
                      "..."
                  ],
                  "rewards": {
                      "referrals_this_month": 42,
                      "notify_on": "example notify_on",
                      "notify_email": "example notify_email",
                      "credits": {
                          "this_month": 42,
                          "total_earned": 42,
                          "remaining": 42
                      },
                      "inspections": {
                          "this_month": 42,
                          "total_earned": 42,
                          "remaining": 42
                      },
                      "referrals": [
                          "..."
                      ],
                      "applied": [
                          "..."
                      ]
                  },
                  "integrations": [
                      "..."
                  ]
                }
  /campaigns-for-email.json:
    post:
      description: <<Retrieve minimal data for all Campaigns a member was sent>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "object",
                  "properties": {
                    "email": {
                      "id": "http://jsonschema.net/email/email",
                      "type": "string"
                    },
                    "euid": {
                      "id": "http://jsonschema.net/email/euid",
                      "type": "string"
                    },
                    "leid": {
                      "id": "http://jsonschema.net/email/leid",
                      "type": "string"
                    }
                  }
                },
                "options": {
                  "id": "http://jsonschema.net/options",
                  "type": "object",
                  "properties": {
                    "list_id": {
                      "id": "http://jsonschema.net/options/list_id",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "email",
                "options"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "email": {
                "email": "example email",
                "euid": "example euid",
                "leid": "example leid"
              },
              "options": {
                "list_id": "example list_id"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "id": "example id",
                      "title": "example title",
                      "subject": "example subject",
                      "send_time": "example send_time",
                      "type": "example type"
                  }
                ]
  /chimp-chatter.json:
    post:
      description: <<Return the current Chimp Chatter messages for an account.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                }
              },
              "required": [
                "apikey"
              ]
            }
          example: |
            {
              "apikey": "example apikey"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "message": "example message",
                      "type": "example type",
                      "url": "example url",
                      "list_id": "example list_id",
                      "campaign_id": "example campaign_id",
                      "update_time": "example update_time"
                  }
                ]
  /generate-text.json:
    post:
      description: <<Have HTML content auto-converted to a text-only format. You can send:- plain HTML, an existing Campaign Id, or an existing Template Id. Note that this will not save anything to or update any of your lists, campaigns, or templates. It's also not just Lynx and is very fine tuned for our template layouts - your mileage may vary.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "type": {
                  "id": "http://jsonschema.net/type",
                  "type": "string"
                },
                "content": {
                  "id": "http://jsonschema.net/content",
                  "type": "object",
                  "properties": {
                    "html": {
                      "id": "http://jsonschema.net/content/html",
                      "type": "string"
                    },
                    "cid": {
                      "id": "http://jsonschema.net/content/cid",
                      "type": "string"
                    },
                    "user_template_id": {
                      "id": "http://jsonschema.net/content/user_template_id",
                      "type": "string"
                    },
                    "base_template_id": {
                      "id": "http://jsonschema.net/content/base_template_id",
                      "type": "string"
                    },
                    "gallery_template_id": {
                      "id": "http://jsonschema.net/content/gallery_template_id",
                      "type": "string"
                    },
                    "url": {
                      "id": "http://jsonschema.net/content/url",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "type",
                "content"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "type": "example type",
              "content": {
                "html": "example html",
                "cid": "example cid",
                "user_template_id": "example user_template_id",
                "base_template_id": "example base_template_id",
                "gallery_template_id": "example gallery_template_id",
                "url": "example url"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "text": "example text"
                }
  /inline-css.json:
    post:
      description: <<Send your HTML content to have the CSS inlined and optionally remove the original styles.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "html": {
                  "id": "http://jsonschema.net/html",
                  "type": "string"
                },
                "strip_css": {
                  "id": "http://jsonschema.net/strip_css",
                  "type": "boolean"
                }
              },
              "required": [
                "apikey",
                "html",
                "strip_css"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "html": "example html",
              "strip_css": true
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "html": "example html"
                }
  /lists-for-email.json:
    post:
      description: <<Retrieve minimal List data for all lists a member is subscribed to.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "object",
                  "properties": {
                    "email": {
                      "id": "http://jsonschema.net/email/email",
                      "type": "string"
                    },
                    "euid": {
                      "id": "http://jsonschema.net/email/euid",
                      "type": "string"
                    },
                    "leid": {
                      "id": "http://jsonschema.net/email/leid",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "email"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "email": {
                "email": "example email",
                "euid": "example euid",
                "leid": "example leid"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "id": "example id",
                      "web_id": 42,
                      "name": "example name"
                  }
                ]
  /ping.json:
    post:
      description: <<"Ping" the MailChimp API - a simple method you can call that will return a constant value as long as everything is good. Note than unlike most all of our methods, we don't throw an Exception if we are having issues. You will simply receive a different string back that will explain our view on what is going on.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                }
              },
              "required": [
                "apikey"
              ]
            }
          example: |
            {
              "apikey": "example apikey"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "msg": "example msg"
                }
  /search-campaigns.json:
    post:
      description: <<Search all campaigns for the specified query terms>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "query": {
                  "id": "http://jsonschema.net/query",
                  "type": "string"
                },
                "offset": {
                  "id": "http://jsonschema.net/offset",
                  "type": "integer"
                },
                "snip_start": {
                  "id": "http://jsonschema.net/snip_start",
                  "type": "string"
                },
                "snip_end": {
                  "id": "http://jsonschema.net/snip_end",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "query",
                "offset",
                "snip_start",
                "snip_end"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "query": "example query",
              "offset": 42,
              "snip_start": "example snip_start",
              "snip_end": "example snip_end"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "results": [
                      "..."
                  ],
                  "snippet": "example snippet",
                  "campaign": {
                      "...": "..."
                  }
                }
  /search-members.json:
    post:
      description: <<Search account wide or on a specific list using the specified query terms>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "query": {
                  "id": "http://jsonschema.net/query",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "offset": {
                  "id": "http://jsonschema.net/offset",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "query",
                "id",
                "offset"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "query": "example query",
              "id": "example id",
              "offset": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "exact_matches": {
                      "total": 42,
                      "members": [
                          "..."
                      ]
                  },
                  "full_search": {
                      "total": 42,
                      "members": [
                          "..."
                      ]
                  }
                }
  /verified-domains.json:
    post:
      description: <<Retrieve all domain verification records for an account>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                }
              },
              "required": [
                "apikey"
              ]
            }
          example: |
            {
              "apikey": "example apikey"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "domain": "example domain",
                      "status": "example status",
                      "email": "example email"
                  }
                ]
/reports:
  /abuse.json:
    post:
      description: <<Get all email addresses that complained about a given campaign>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    },
                    "since": {
                      "id": "http://jsonschema.net/opts/since",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "opts"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "opts": {
                "start": 42,
                "limit": 42,
                "since": "example since"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      "..."
                  ]
                }
  /advice.json:
    post:
      description: <<Retrieve the text presented in our app for how a campaign performed and any advice we may have for you - best suited for display in customized reports pages. Note:- some messages will contain HTML - clean tags as necessary>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "msg": "example msg",
                      "type": "example type"
                  }
                ]
  /bounce-message.json:
    post:
      description: <<Retrieve the most recent full bounce message for a specific email address on the given campaign. Messages over 30 days old are subject to being removed>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "object",
                  "properties": {
                    "email": {
                      "id": "http://jsonschema.net/email/email",
                      "type": "string"
                    },
                    "euid": {
                      "id": "http://jsonschema.net/email/euid",
                      "type": "string"
                    },
                    "leid": {
                      "id": "http://jsonschema.net/email/leid",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "email"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "email": {
                "email": "example email",
                "euid": "example euid",
                "leid": "example leid"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "date": "example date",
                  "member": {
                      "...": "..."
                  },
                  "message": "example message"
                }
  /bounce-messages.json:
    post:
      description: <<Retrieve the full bounce messages for the given campaign. Note that this can return very large amounts of data depending on how large the campaign was and how much cruft the bounce provider returned. Also, messages over 30 days old are subject to being removed>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    },
                    "since": {
                      "id": "http://jsonschema.net/opts/since",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "opts"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "opts": {
                "start": 42,
                "limit": 42,
                "since": "example since"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "date": "example date",
                          "member": {
                              "...": "..."
                          },
                          "message": "example message"
                      }
                  ]
                }
  /click-detail.json:
    post:
      description: <<Return the list of email addresses that clicked on a given url, and how many times they clicked>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "tid": {
                  "id": "http://jsonschema.net/tid",
                  "type": "integer"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    },
                    "sort_field": {
                      "id": "http://jsonschema.net/opts/sort_field",
                      "type": "string"
                    },
                    "sort_dir": {
                      "id": "http://jsonschema.net/opts/sort_dir",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "tid",
                "opts"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "tid": 42,
              "opts": {
                "start": 42,
                "limit": 42,
                "sort_field": "example sort_field",
                "sort_dir": "example sort_dir"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "member": {
                              "...": "..."
                          },
                          "clicks": 42
                      }
                  ]
                }
  /clicks.json:
    post:
      description: <<The urls tracked and their click counts for a given campaign.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": [
                      {
                          "url": "example url",
                          "clicks": 42,
                          "clicks_percent": 3.14159,
                          "unique": 42,
                          "unique_percent": 3.14159,
                          "tid": 42
                      }
                  ],
                  "a": [
                      {
                          "url": "example url",
                          "clicks": 42,
                          "clicks_percent": 3.14159,
                          "unique": 42,
                          "unique_percent": 3.14159,
                          "tid": 42
                      }
                  ],
                  "b": [
                      {
                          "url": "example url",
                          "clicks": 42,
                          "clicks_percent": 3.14159,
                          "unique": 42,
                          "unique_percent": 3.14159,
                          "tid": 42
                      }
                  ]
                }
  /domain-performance.json:
    post:
      description: <<Get the top 5 performing email domains for this campaign. Users wanting more than 5 should use campaign reports/member-activity() or campaignEmailStatsAIMAll() and generate any additional stats they require.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "domain": "example domain",
                      "total_sent": 42,
                      "emails": 42,
                      "bounces": 42,
                      "opens": 42,
                      "clicks": 42,
                      "unsubs": 42,
                      "delivered": 42,
                      "emails_pct": 42,
                      "bounces_pct": 42,
                      "opens_pct": 42,
                      "clicks_pct": 42,
                      "unsubs_pct": 42
                  }
                ]
  /ecomm-orders.json:
    post:
      description: <<Retrieve the Ecommerce Orders tracked by ecomm/order-add()>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    },
                    "since": {
                      "id": "http://jsonschema.net/opts/since",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "opts"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "opts": {
                "start": 42,
                "limit": 42,
                "since": "example since"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "store_id": "example store_id",
                          "store_name": "example store_name",
                          "order_id": "example order_id",
                          "member": {
                              "...": "..."
                          },
                          "order_total": 3.14159,
                          "tax_total": 3.14159,
                          "ship_total": 3.14159,
                          "order_date": "example order_date",
                          "lines": [
                              {
                                  "line_num": 42,
                                  "product_id": 42,
                                  "product_name": "example product_name",
                                  "product_sku": "example product_sku",
                                  "product_category_id": 42,
                                  "product_category_name": "example product_category_name",
                                  "qty": 3.14159,
                                  "cost": 3.14159
                              }
                          ]
                      }
                  ]
                }
  /eepurl.json:
    post:
      description: <<Retrieve the eepurl stats from the web/Twitter mentions for this campaign>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "twitter": {
                      "tweets": 42,
                      "first_tweet": "example first_tweet",
                      "last_tweet": "example last_tweet",
                      "retweets": 42,
                      "first_retweet": "example first_retweet",
                      "last_retweet": "example last_retweet",
                      "statuses": [
                          {
                              "status": "example status",
                              "screen_name": "example screen_name",
                              "status_id": "example status_id",
                              "datetime": "example datetime",
                              "is_retweet": true
                          }
                      ]
                  },
                  "clicks": {
                      "clicks": 42,
                      "first_click": "example first_click",
                      "last_click": "example last_click",
                      "locations": [
                          {
                              "country": "example country",
                              "region": "example region"
                          }
                      ]
                  },
                  "referrers": [
                      {
                          "referrer": "example referrer",
                          "clicks": 42,
                          "first_click": "example first_click",
                          "last_click": "example last_click"
                      }
                  ]
                }
  /geo-opens.json:
    post:
      description: <<Retrieve the countries/regions and number of opens tracked for each. Email address are not returned.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "code": "example code",
                      "name": "example name",
                      "opens": 42,
                      "regions": [
                          {
                              "code": "example code",
                              "name": "example name",
                              "opens": 42
                          }
                      ]
                  }
                ]
  /google-analytics.json:
    post:
      description: <<Retrieve the Google Analytics data we've collected for this campaign. Note, requires Google Analytics Add-on to be installed and configured>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "visits": 42,
                      "pages": 42,
                      "new_visits": 42,
                      "bounces": 42,
                      "time_on_site": 3.14159,
                      "goal_conversions": 42,
                      "goal_value": 3.14159,
                      "revenue": 3.14159,
                      "transactions": 42,
                      "ecomm_conversions": 42,
                      "goals": [
                          {
                              "name": "example name",
                              "conversions": 42
                          }
                      ]
                  }
                ]
  /member-activity.json:
    post:
      description: <<Given a campaign and email address, return the entire click and open history with timestamps, ordered by time. If you need to dump the full activity for a campaign and/or get incremental results, you should use the campaignSubscriberActivity Export API method, not this, especially for large campaigns.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "emails": {
                  "id": "http://jsonschema.net/emails",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/emails/0",
                    "type": "string"
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "emails"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "emails": [
                "..."
              ]
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "success_count": 42,
                  "error_count": 42,
                  "errors": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          },
                          "msg": "example msg"
                      }
                  ],
                  "data": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          },
                          "member": {
                              "...": "..."
                          },
                          "activity": [
                              {
                                  "action": "example action",
                                  "timestamp": "example timestamp",
                                  "url": "example url",
                                  "ip": "example ip"
                              }
                          ]
                      }
                  ]
                }
  /not-opened.json:
    post:
      description: <<Retrieve the list of email addresses that did not open a given campaign>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "opts"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "opts": {
                "start": 42,
                "limit": 42
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      "..."
                  ]
                }
  /opened.json:
    post:
      description: <<Retrieve the list of email addresses that opened a given campaign with how many times they opened>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    },
                    "sort_field": {
                      "id": "http://jsonschema.net/opts/sort_field",
                      "type": "string"
                    },
                    "sort_dir": {
                      "id": "http://jsonschema.net/opts/sort_dir",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "opts"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "opts": {
                "start": 42,
                "limit": 42,
                "sort_field": "example sort_field",
                "sort_dir": "example sort_dir"
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "member": {
                              "...": "..."
                          },
                          "opens": 42
                      }
                  ]
                }
  /sent-to.json:
    post:
      description: <<Get email addresses the campaign was sent to>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "status": {
                      "id": "http://jsonschema.net/opts/status",
                      "type": "string"
                    },
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "opts"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "opts": {
                "status": "example status",
                "start": 42,
                "limit": 42
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "member": {
                              "...": "..."
                          },
                          "status": "example status",
                          "absplit_group": "example absplit_group",
                          "tz_group": "example tz_group"
                      }
                  ]
                }
  /share.json:
    post:
      description: <<Get the URL to a customized VIP Report for the specified campaign and optionally send an email to someone with links to it. Note subsequent calls will overwrite anything already set for the same campign (eg, the password)>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/opts/0",
                    "type": "string"
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "opts"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "opts": [
                "..."
              ]
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "title": "example title",
                  "url": "example url",
                  "secure_url": "example secure_url",
                  "password": "example password"
                }
  /summary.json:
    post:
      description: <<Retrieve relevant aggregate campaign statistics (opens, bounces, clicks, etc.)>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "cid"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "syntax_errors": 42,
                  "hard_bounces": 42,
                  "soft_bounces": 42,
                  "unsubscribes": 42,
                  "abuse_reports": 42,
                  "forwards": 42,
                  "forwards_opens": 42,
                  "opens": 42,
                  "last_open": "example last_open",
                  "unique_opens": 42,
                  "clicks": 42,
                  "unique_clicks": 42,
                  "last_click": "example last_click",
                  "users_who_clicked": 42,
                  "emails_sent": 42,
                  "unique_likes": 42,
                  "recipient_likes": 42,
                  "facebook_likes": 42,
                  "industry": {
                      "type": "example type",
                      "open_rate": 3.14159,
                      "click_rate": 3.14159,
                      "bounce_rate": 3.14159,
                      "unopen_rate": 3.14159,
                      "unsub_rate": 3.14159,
                      "abuse_rate": 3.14159
                  },
                  "absplit": {
                      "bounces_a": 42,
                      "bounces_b": 42,
                      "forwards_a": 42,
                      "forwards_b": 42,
                      "abuse_reports_a": 42,
                      "abuse_reports_b": 42,
                      "unsubs_a": 42,
                      "unsubs_b": 42,
                      "recipients_click_a": 42,
                      "recipients_click_b": 42,
                      "forwards_opens_a": 42,
                      "forwards_opens_b": 42,
                      "opens_a": 42,
                      "opens_b": 42,
                      "last_open_a": "example last_open_a",
                      "last_open_b": "example last_open_b",
                      "unique_opens_a": 42,
                      "unique_opens_b": 42
                  },
                  "timewarp": [
                      {
                          "opens": 42,
                          "last_open": "example last_open",
                          "unique_opens": 42,
                          "clicks": 42,
                          "last_click": "example last_click",
                          "unique_clicks": 42,
                          "bounces": 42,
                          "total": 42,
                          "sent": 42
                      }
                  ],
                  "timeseries": [
                      {
                          "timestamp": "example timestamp",
                          "emails_sent": 42,
                          "unique_opens": 42,
                          "recipients_click": 42
                      }
                  ]
                }
  /unsubscribes.json:
    post:
      description: <<Get all unsubscribed email addresses for a given campaign>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "cid": {
                  "id": "http://jsonschema.net/cid",
                  "type": "string"
                },
                "opts": {
                  "id": "http://jsonschema.net/opts",
                  "type": "object",
                  "properties": {
                    "start": {
                      "id": "http://jsonschema.net/opts/start",
                      "type": "integer"
                    },
                    "limit": {
                      "id": "http://jsonschema.net/opts/limit",
                      "type": "integer"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "cid",
                "opts"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "cid": "example cid",
              "opts": {
                "start": 42,
                "limit": 42
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "total": 42,
                  "data": [
                      {
                          "member": "example member",
                          "reason": "example reason",
                          "reason_text": "example reason_text"
                      }
                  ]
                }
/templates:
  /add.json:
    post:
      description: <<Create a new user template, NOT campaign content. These templates can then be applied while creating campaigns.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "name": {
                  "id": "http://jsonschema.net/name",
                  "type": "string"
                },
                "html": {
                  "id": "http://jsonschema.net/html",
                  "type": "string"
                },
                "folder_id": {
                  "id": "http://jsonschema.net/folder_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "name",
                "html",
                "folder_id"
              ]
            }          
          example: |
            {
              "apikey": "example apikey",
              "name": "example name",
              "html": "example html",
              "folder_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "template_id": 42
                }
  /del.json:
    post:
      description: <<Delete (deactivate) a user template>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "template_id": {
                  "id": "http://jsonschema.net/template_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "template_id"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "template_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /info.json:
    post:
      description: <<Pull details for a specific template to help support editing>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "template_id": {
                  "id": "http://jsonschema.net/template_id",
                  "type": "integer"
                },
                "type": {
                  "id": "http://jsonschema.net/type",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "template_id",
                "type"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "template_id": 42,
              "type": "example type"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "default_content": {
                      "...": "..."
                  },
                  "sections": {
                      "...": "..."
                  },
                  "source": "example source",
                  "preview": "example preview"
                }
  /list.json:
    post:
      description: <<Retrieve various templates available in the system, allowing some thing similar to our template gallery to be created.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "types": {
                  "id": "http://jsonschema.net/types",
                  "type": "object",
                  "properties": {
                    "user": {
                      "id": "http://jsonschema.net/types/user",
                      "type": "boolean"
                    },
                    "gallery": {
                      "id": "http://jsonschema.net/types/gallery",
                      "type": "boolean"
                    },
                    "base": {
                      "id": "http://jsonschema.net/types/base",
                      "type": "boolean"
                    }
                  }
                },
                "filters": {
                  "id": "http://jsonschema.net/filters",
                  "type": "object",
                  "properties": {
                    "category": {
                      "id": "http://jsonschema.net/filters/category",
                      "type": "string"
                    },
                    "folder_id": {
                      "id": "http://jsonschema.net/filters/folder_id",
                      "type": "string"
                    },
                    "include_inactive": {
                      "id": "http://jsonschema.net/filters/include_inactive",
                      "type": "boolean"
                    },
                    "inactive_only": {
                      "id": "http://jsonschema.net/filters/inactive_only",
                      "type": "boolean"
                    },
                    "include_drag_and_drop": {
                      "id": "http://jsonschema.net/filters/include_drag_and_drop",
                      "type": "boolean"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "types",
                "filters"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "types": {
                "user": true,
                "gallery": true,
                "base": true
              },
              "filters": {
                "category": "example category",
                "folder_id": "example folder_id",
                "include_inactive": true,
                "inactive_only": true,
                "include_drag_and_drop": true
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "user": [
                      "..."
                  ],
                  "gallery": [
                      "..."
                  ],
                  "base": [
                      "..."
                  ]
                }
  /undel.json:
    post:
      description: <<Undelete (reactivate) a user template>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "template_id": {
                  "id": "http://jsonschema.net/template_id",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "template_id"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "template_id": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
  /update.json:
    post:
      description: <<Replace the content of a user template, NOT campaign content.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "template_id": {
                  "id": "http://jsonschema.net/template_id",
                  "type": "integer"
                },
                "values": {
                  "id": "http://jsonschema.net/values",
                  "type": "object",
                  "properties": {
                    "name": {
                      "id": "http://jsonschema.net/values/name",
                      "type": "string"
                    },
                    "html": {
                      "id": "http://jsonschema.net/values/html",
                      "type": "string"
                    },
                    "folder_id": {
                      "id": "http://jsonschema.net/values/folder_id",
                      "type": "integer"
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "template_id",
                "values"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "template_id": 42,
              "values": {
                "name": "example name",
                "html": "example html",
                "folder_id": 42
              }
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "complete": true
                }
/users:
  /invite.json:
    post:
      description: <<Invite a user to your account>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "string"
                },
                "role": {
                  "id": "http://jsonschema.net/role",
                  "type": "string"
                },
                "msg": {
                  "id": "http://jsonschema.net/msg",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "email",
                "role",
                "msg"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "email": "example email",
              "role": "example role",
              "msg": "example msg"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "status": "example status"
                }
  /invite-resend.json:
    post:
      description: <<Resend an invite a user to your account. Note, if the same address has been invited multiple times, this will simpy re-send the most recent invite>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "email"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "email": "example email"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "status": "example status"
                }
  /invite-revoke.json:
    post:
      description: <<Revoke an invitation sent to a user to your account. Note, if the same address has been invited multiple times, this will simpy revoke the most recent invite>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "email"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "email": "example email"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "status": "example status"
                }
  /invites.json:
    post:
      description: <<Retrieve the list of pending users invitations have been sent for.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                }
              },
              "required": [
                "apikey"
              ]
            }         
          example: |
            {
              "apikey": "example apikey"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "email": "example email",
                      "role": "example role",
                      "sent_at": "example sent_at",
                      "expiration": "example expiration",
                      "msg": "example msg"
                  }
                ]
  /login-revoke.json:
    post:
      description: <<Revoke access for a specified login>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "username": {
                  "id": "http://jsonschema.net/username",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "username"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "username": "example username"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "status": "example status"
                }
  /logins.json:
    post:
      description: <<Retrieve the list of active logins.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                }
              },
              "required": [
                "apikey"
              ]
            }         
          example: |
            {
              "apikey": "example apikey"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "id": 42,
                      "username": "example username",
                      "name": "example name",
                      "email": "example email",
                      "role": "example role",
                      "avatar": "example avatar",
                      "global_user_id": 42,
                      "dc_unique_id": "example dc_unique_id"
                  }
                ]
  /profile.json:
    post:
      description: <<Retrieve the profile for the login owning the provided API Key>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                }
              },
              "required": [
                "apikey"
              ]
            }         
          example: |
            {
              "apikey": "example apikey"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "id": 42,
                  "username": "example username",
                  "name": "example name",
                  "email": "example email",
                  "role": "example role",
                  "avatar": "example avatar",
                  "global_user_id": 42,
                  "dc_unique_id": "example dc_unique_id",
                  "account_name": "example account_name"
                }
/vip:
  /activity.json:
    post:
      description: <<Retrieve all Activity (opens/clicks) for VIPs over the past 10 days>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                }
              },
              "required": [
                "apikey"
              ]
            }         
          example: |
            {
              "apikey": "example apikey"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "action": "example action",
                      "timestamp": "example timestamp",
                      "url": "example url",
                      "unique_id": "example unique_id",
                      "title": "example title",
                      "list_name": "example list_name",
                      "list_id": "example list_id",
                      "email": "example email",
                      "fname": "example fname",
                      "lname": "example lname",
                      "member_rating": 42,
                      "member_since": "example member_since",
                      "geo": {
                          "latitude": "example latitude",
                          "longitude": "example longitude",
                          "gmtoff": "example gmtoff",
                          "dstoff": "example dstoff",
                          "timezone": "example timezone",
                          "cc": "example cc",
                          "region": "example region"
                      }
                  }
                ]
  /add.json:
    post:
      description: <<Add VIPs (previously called Golden Monkeys)>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "emails": {
                  "id": "http://jsonschema.net/emails",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/emails/0",
                    "type": "object",
                    "properties": {
                      "email": {
                        "id": "http://jsonschema.net/emails/0/email",
                        "type": "string"
                      },
                      "euid": {
                        "id": "http://jsonschema.net/emails/0/euid",
                        "type": "string"
                      },
                      "leid": {
                        "id": "http://jsonschema.net/emails/0/leid",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "id",
                "emails"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "emails": [
                {
                  "email": "example email",
                  "euid": "example euid",
                  "leid": "example leid"
                }
              ]
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "success_count": 42,
                  "error_count": 42,
                  "errors": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          },
                          "code": "example code",
                          "error": "example error"
                      }
                  ],
                  "data": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          }
                      }
                  ]
                }
  /del.json:
    post:
      description: <<Remove VIPs - this does not affect list membership>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "id": {
                  "id": "http://jsonschema.net/id",
                  "type": "string"
                },
                "emails": {
                  "id": "http://jsonschema.net/emails",
                  "type": "array",
                  "items": {
                    "id": "http://jsonschema.net/emails/0",
                    "type": "object",
                    "properties": {
                      "email": {
                        "id": "http://jsonschema.net/emails/0/email",
                        "type": "string"
                      },
                      "euid": {
                        "id": "http://jsonschema.net/emails/0/euid",
                        "type": "string"
                      },
                      "leid": {
                        "id": "http://jsonschema.net/emails/0/leid",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": [
                "apikey",
                "id",
                "emails"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "id": "example id",
              "emails": [
                {
                  "email": "example email",
                  "euid": "example euid",
                  "leid": "example leid"
                }
              ]
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "success_count": 42,
                  "error_count": 42,
                  "errors": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          },
                          "code": "example code",
                          "msg": "example msg"
                      }
                  ],
                  "data": [
                      {
                          "email": {
                              "email": "example email",
                              "euid": "example euid",
                              "leid": "example leid"
                          }
                      }
                  ]
                }
  /members.json:
    post:
      description: <<Retrieve all Golden Monkey(s) for an account>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                }
              },
              "required": [
                "apikey"
              ]
            }         
          example: |
            {
              "apikey": "example apikey"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                [
                  {
                      "list_id": "example list_id",
                      "list_name": "example list_name",
                      "email": "example email",
                      "fname": "example fname",
                      "lname": "example lname",
                      "member_rating": 42,
                      "member_since": "example member_since"
                  }
                ]
/goal:
  /events.json:
    post:
      description: <<Retrieve goal event data for a particular list member. Note:- only unique events are returned. If a user triggers a particular event multiple times, you will still only receive one entry for that event.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "list_id": {
                  "id": "http://jsonschema.net/list_id",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "object",
                  "properties": {
                    "email": {
                      "id": "http://jsonschema.net/email/email",
                      "type": "string"
                    },
                    "euid": {
                      "id": "http://jsonschema.net/email/euid",
                      "type": "string"
                    },
                    "leid": {
                      "id": "http://jsonschema.net/email/leid",
                      "type": "string"
                    }
                  }
                },
                "start": {
                  "id": "http://jsonschema.net/start",
                  "type": "integer"
                },
                "limit": {
                  "id": "http://jsonschema.net/limit",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "list_id",
                "email",
                "start",
                "limit"
              ]
            }         
          example: |
            {
              "apikey": "example apikey",
              "list_id": "example list_id",
              "email": {
                "email": "example email",
                "euid": "example euid",
                "leid": "example leid"
              },
              "start": 42,
              "limit": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "data": [
                      {
                          "event": "example event",
                          "last_visited_at": "example last_visited_at"
                      }
                  ],
                  "total": 42
                }
  /record-event.json:
    post:
      description: <<This allows programmatically trigger goal event collection without the use of front-end code.>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "list_id": {
                  "id": "http://jsonschema.net/list_id",
                  "type": "string"
                },
                "email": {
                  "id": "http://jsonschema.net/email",
                  "type": "object",
                  "properties": {
                    "email": {
                      "id": "http://jsonschema.net/email/email",
                      "type": "string"
                    },
                    "euid": {
                      "id": "http://jsonschema.net/email/euid",
                      "type": "string"
                    },
                    "leid": {
                      "id": "http://jsonschema.net/email/leid",
                      "type": "string"
                    }
                  }
                },
                "campaign_id": {
                  "id": "http://jsonschema.net/campaign_id",
                  "type": "string"
                },
                "event": {
                  "id": "http://jsonschema.net/event",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "list_id",
                "email",
                "campaign_id",
                "event"
              ]
            }        
          example: |
            {
              "apikey": "example apikey",
              "list_id": "example list_id",
              "email": {
                "email": "example email",
                "euid": "example euid",
                "leid": "example leid"
              },
              "campaign_id": "example campaign_id",
              "event": "example event"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "event": "example event",
                  "last_visited_at": "example last_visited_at"
                }
/conversations:
  /list.json:
    post:
      description: <<Retrieve conversation metadata, includes message data for the most recent message in the conversation>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "list_id": {
                  "id": "http://jsonschema.net/list_id",
                  "type": "string"
                },
                "leid": {
                  "id": "http://jsonschema.net/leid",
                  "type": "string"
                },
                "campaign_id": {
                  "id": "http://jsonschema.net/campaign_id",
                  "type": "string"
                },
                "start": {
                  "id": "http://jsonschema.net/start",
                  "type": "integer"
                },
                "limit": {
                  "id": "http://jsonschema.net/limit",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "list_id",
                "leid",
                "campaign_id",
                "start",
                "limit"
              ]
            }        
          example: |
            {
              "apikey": "example apikey",
              "list_id": "example list_id",
              "leid": "example leid",
              "campaign_id": "example campaign_id",
              "start": 42,
              "limit": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "count": 42,
                  "data": [
                      {
                          "unique_id": "example unique_id",
                          "message_count": 42,
                          "campaign_id": "example campaign_id",
                          "list_id": "example list_id",
                          "unread_messages": 42,
                          "from_label": "example from_label",
                          "from_email": "example from_email",
                          "subject": "example subject",
                          "timestamp": "example timestamp",
                          "last_message": {
                              "from_label": "example from_label",
                              "from_email": "example from_email",
                              "subject": "example subject",
                              "message": "example message",
                              "read": true,
                              "timestamp": "example timestamp"
                          }
                      }
                  ]
                }
  /messages.json:
    post:
      description: <<Retrieve conversation messages>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "conversation_id": {
                  "id": "http://jsonschema.net/conversation_id",
                  "type": "string"
                },
                "mark_as_read": {
                  "id": "http://jsonschema.net/mark_as_read",
                  "type": "boolean"
                },
                "start": {
                  "id": "http://jsonschema.net/start",
                  "type": "integer"
                },
                "limit": {
                  "id": "http://jsonschema.net/limit",
                  "type": "integer"
                }
              },
              "required": [
                "apikey",
                "conversation_id",
                "mark_as_read",
                "start",
                "limit"
              ]
            }        
          example: |
            {
              "apikey": "example apikey",
              "conversation_id": "example conversation_id",
              "mark_as_read": true,
              "start": 42,
              "limit": 42
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "count": 42,
                  "data": [
                      {
                          "from_label": "example from_label",
                          "from_email": "example from_email",
                          "subject": "example subject",
                          "message": "example message",
                          "read": true,
                          "timestamp": "example timestamp"
                      }
                  ]
                }
  /reply.json:
    post:
      description: <<Reply to a conversation>>
      body:
        application/json:
          schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "id": "http://jsonschema.net",
              "type": "object",
              "properties": {
                "apikey": {
                  "id": "http://jsonschema.net/apikey",
                  "type": "string"
                },
                "conversation_id": {
                  "id": "http://jsonschema.net/conversation_id",
                  "type": "string"
                },
                "message": {
                  "id": "http://jsonschema.net/message",
                  "type": "string"
                }
              },
              "required": [
                "apikey",
                "conversation_id",
                "message"
              ]
            }        
          example: |
            {
              "apikey": "example apikey",
              "conversation_id": "example conversation_id",
              "message": "example message"
            }
      responses:
        "200":
          body:
            application/json:
              example: |
                {
                  "from_label": "example from_label",
                  "from_email": "example from_email",
                  "subject": "example subject",
                  "message": "example message",
                  "read": true,
                  "timestamp": "example timestamp"
                }